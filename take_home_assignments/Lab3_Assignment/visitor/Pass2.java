//
// Generated by JTB 1.3.2
//

package visitor;

import syntaxtree.*;
import visitor.Pass1.classAttr;
import visitor.Pass1.methAttr;
import visitor.Pass1.retAttr;
import visitor.Pass1.varAttr;

import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order. Your visitors may extend this class.
 */
public class Pass2<R, A> implements GJVisitor<R, A> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //

   public Map<String, classAttr> classTable = new HashMap<String, classAttr>();
   public Map<String, Pass1.retAttr> varMethMap = new HashMap<String, Pass1.retAttr>();

   public Pass2(Map<String, Pass1.classAttr> ct) {
      classTable = ct;
   }

   String curClass = "-1";
   String curMethod = "-1";
   int code = 0;
   int label = 0;
   boolean finalPrint = true;
   boolean debug = false;
   boolean minidebug = false;
   boolean toStore = false;
   boolean printMap = false;

   String getNewCode() {
      code++;
      return "TEMP " + Integer.toString(code);
   }

   String getNewLabel() {
      label++;
      return "L" + Integer.toString(label);
   }

   void print(String s) {
      System.out.println(s);
   }

   void assignMem(String bcode, int size, boolean init) {
      String tcode = getNewCode();
      if(finalPrint) print("MOVE " + tcode + " " + size * 4);
      if(finalPrint) print("MOVE " + bcode + " HALLOCATE " + tcode);

      if (init) {
         String zcode = getNewCode(); // zero
         if(finalPrint) print("MOVE " + zcode + " 0");
         for (int i = 0; i < size; i++) {
            if(finalPrint) print("HSTORE " + bcode + " " + (i * 4) + " " + zcode); // initialize to 0
         }
      }
   }

   Pass1.retAttr createNewClass(String cname) {
      String cstrCode = getNewCode();
      String vtCode = getNewCode();
      String mcode = getNewCode();
      Pass1.classAttr cattr = classTable.get(cname);
      retAttr cstruct = new retAttr(cstrCode, cname);

      int vnum = cattr.varList.size();
      int mnum = cattr.methList.size();
      assignMem(cstrCode, vnum + 1, true); // initialize yes
      assignMem(vtCode, mnum, false); // vptr no initialize

      for (int i = 0; i < mnum; i++) {
         String curMethCode = cattr.methList.get(i).code;
         if(finalPrint) print("MOVE " + mcode + " " + curMethCode);
         if(finalPrint) print("HSTORE " + vtCode + " " + (i * 4) + " " + mcode);
      }

      if(finalPrint) print("HSTORE " + cstrCode + " 0 " + vtCode);
      return cstruct; // the class struct
   }

   Pass1.methAttr getMeth(String mname, String cname) {
      Pass1.classAttr cattr = classTable.get(cname);
      if(debug){
         if(cattr == null){
            print("NULL getMeth - " + cname);
         }
      }
      for (Pass1.methAttr mattr : cattr.methList) {
         if ((mattr.name).equals(mname)) {
            return mattr;
         }
      }
      return null;
   }

   String getType(String vname) {
      String cname = curClass;
      String mname = curMethod;
      Pass1.classAttr cattr = classTable.get(cname);
      ArrayList<Pass1.methAttr> mlist = cattr.methList;
      for (Pass1.methAttr mattr : mlist) {
         if (mattr.name.equals(mname)) {
            // in the method
            for (Pass1.varAttr vattr1 : mattr.argList) {
               boolean check = (vattr1.name).equals(vname) && (vattr1.cname).equals(cname)
                     && (vattr1.mname).equals(mname);
               if (check) {
                  return vattr1.type;
               }
            }
            for (Pass1.varAttr vattr1 : mattr.varList) {
               boolean check = (vattr1.name).equals(vname) && (vattr1.cname).equals(cname)
                     && (vattr1.mname).equals(mname);
               if (check) {
                  return vattr1.type;
               }
            }
         }
         for (Pass1.varAttr vattr1 : cattr.varList) {
            boolean check = (vattr1.name).equals(vname) && (vattr1.cname).equals(cname)
                  && (vattr1.mname).equals(mname);
            if (check) {
               return vattr1.type;
            }
         }
      }
      return "-1";
   }

   void putMethMap(Pass1.methAttr mattr) {
      for (Pass1.varAttr vattr : mattr.argList) {
         String vcode = getNewCode();
         String vtype = vattr.type;
         retAttr cstruct = new retAttr(vcode, vtype);
         varMethMap.put(vattr.name, cstruct);
      }
      for (Pass1.varAttr vattr : mattr.varList) {
         String vcode = getNewCode();
         String vtype = vattr.type;
         retAttr cstruct = new retAttr(vcode, vtype);
         varMethMap.put(vattr.name, cstruct);
      }
   }

   void remMethMap(Pass1.methAttr mattr) {
      varMethMap.clear();
   }

   void printMethMap(){
      print("// Debugging");
      for (String name: varMethMap.keySet()) {
         String key = name;
         retAttr value = varMethMap.get(name);
         System.out.println("//   " + key + " " + value.code);
      }
      print("// Printed");
   }


   public R visit(NodeList n, A argu) {
      R _ret = null;
      int _count = 0;
      for (Enumeration<Node> e = n.elements(); e.hasMoreElements();) {
         e.nextElement().accept(this, argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
      if (n.present()) {
         R _ret = null;
         int _count = 0;
         for (Enumeration<Node> e = n.elements(); e.hasMoreElements();) {
            e.nextElement().accept(this, argu);
            _count++;
         }
         return _ret;
      } else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if (n.present())
         return n.node.accept(this, argu);
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret = null;
      int _count = 0;
      for (Enumeration<Node> e = n.elements(); e.hasMoreElements();) {
         e.nextElement().accept(this, argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) {
      return null;
   }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> MainClass()
    * f1 -> ( TypeDeclaration() )*
    * f2 -> <EOF>
    */
   public R visit(Goal n, A argu) {
      R _ret = null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> "public"
    * f4 -> "static"
    * f5 -> "void"
    * f6 -> "main"
    * f7 -> "("
    * f8 -> "String"
    * f9 -> "["
    * f10 -> "]"
    * f11 -> Identifier()
    * f12 -> ")"
    * f13 -> "{"
    * f14 -> PrintStatement()
    * f15 -> "}"
    * f16 -> "}"
    */
   public R visit(MainClass n, A argu) {
      R _ret = null;
      if(finalPrint) print("MAIN");
      n.f0.accept(this, argu);
      String cname = (String) n.f1.f0.tokenImage;
      curClass = cname;
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      n.f10.accept(this, argu);
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      n.f13.accept(this, argu);
      n.f14.accept(this, argu);
      n.f15.accept(this, argu);
      n.f16.accept(this, argu);
      if(finalPrint) print("END");
      return _ret;
   }

   /**
    * f0 -> ClassDeclaration()
    * | ClassExtendsDeclaration()
    */
   public R visit(TypeDeclaration n, A argu) {
      R _ret = null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> ( VarDeclaration() )*
    * f4 -> ( MethodDeclaration() )*
    * f5 -> "}"
    */
   public R visit(ClassDeclaration n, A argu) {
      R _ret = null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String cname = (String) n.f1.f0.tokenImage;
      curClass = cname;
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "extends"
    * f3 -> Identifier()
    * f4 -> "{"
    * f5 -> ( VarDeclaration() )*
    * f6 -> ( MethodDeclaration() )*
    * f7 -> "}"
    */
   public R visit(ClassExtendsDeclaration n, A argu) {
      R _ret = null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String cname = (String) n.f1.f0.tokenImage;
      curClass = cname;
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    * f2 -> ";"
    */
   public R visit(VarDeclaration n, A argu) {
      R _ret = null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "public"
    * f1 -> Type()
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( FormalParameterList() )?
    * f5 -> ")"
    * f6 -> "{"
    * f7 -> ( VarDeclaration() )*
    * f8 -> ( Statement() )*
    * f9 -> "return"
    * f10 -> Expression()
    * f11 -> ";"
    * f12 -> "}"
    */
   public R visit(MethodDeclaration n, A argu) {
      R _ret = null;
      code = 0;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      String mname = (String) n.f2.f0.tokenImage;
      curMethod = mname;
      Pass1.classAttr cattr = classTable.get(curClass);
      if(debug){
         print("Called getMeth - " + mname + " " + curClass);
      }
      Pass1.methAttr mattr = getMeth(mname, curClass);

      putMethMap(mattr);
      if(printMap) printMethMap();
      int argSize = mattr.argList.size();
      if(finalPrint) print(mattr.code + " [" + (argSize + 1) + "]");
      if(finalPrint) print("BEGIN");
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      toStore = true;
      retAttr rstruct = (retAttr) n.f10.accept(this, argu);
      toStore = false;
      String rcode = rstruct.code;
      if(finalPrint) print("RETURN " + rcode);
      // if(rcode.equals("TEMP 3")){
      //    print("HERE IN METH");
      // }
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      remMethMap(mattr);
      if(finalPrint) print("END");
      return _ret;
   }

   /**
    * f0 -> FormalParameter()
    * f1 -> ( FormalParameterRest() )*
    */
   public R visit(FormalParameterList n, A argu) {
      R _ret = null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    */
   public R visit(FormalParameter n, A argu) {
      R _ret = null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> FormalParameter()
    */
   public R visit(FormalParameterRest n, A argu) {
      R _ret = null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ArrayType()
    * | BooleanType()
    * | IntegerType()
    * | Identifier()
    */
   public R visit(Type n, A argu) {
      R _ret = null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "int"
    * f1 -> "["
    * f2 -> "]"
    */
   public R visit(ArrayType n, A argu) {
      R _ret = null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "boolean"
    */
   public R visit(BooleanType n, A argu) {
      R _ret = null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "int"
    */
   public R visit(IntegerType n, A argu) {
      R _ret = null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Block()
    * | AssignmentStatement()
    * | ArrayAssignmentStatement()
    * | IfStatement()
    * | WhileStatement()
    * | DoStatement()
    * | PrintStatement()
    */
   public R visit(Statement n, A argu) {
      R _ret = null;
      retAttr bstruct = (retAttr) n.f0.accept(this, argu);
      return (R) bstruct;
   }

   /**
    * f0 -> "{"
    * f1 -> ( Statement() )*
    * f2 -> "}"
    */
   public R visit(Block n, A argu) {
      R _ret = null;
      n.f0.accept(this, argu);
      retAttr bstruct = (retAttr) n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return (R) bstruct;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "="
    * f2 -> Expression()
    * f3 -> ";"
    */

   public R visit(AssignmentStatement n, A argu) {
      R _ret = null;
      n.f0.accept(this, argu);
      String vname = n.f0.f0.tokenImage;
      n.f1.accept(this, argu);
      toStore = true;
      retAttr estruct = (retAttr) n.f2.accept(this, argu);
      toStore = false;
      String ecode = estruct.code;
      n.f3.accept(this, argu);
      
      if(varMethMap.containsKey(vname)){
         retAttr vstruct = varMethMap.get(vname);
         String vcode = vstruct.code;
         if(finalPrint) print("MOVE " + vcode + " " + ecode);
      }
      else{
         // in class
         int offset = 4;
         Pass1.classAttr cattr = classTable.get(curClass);
         for(Pass1.varAttr vattr: cattr.varList){
            if((vattr.name).equals(vname)){
               break;
            }
            offset += 4;
         }
         if(finalPrint) print("HSTORE " + "TEMP 0 " + offset + " " + ecode);
      }
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "["
    * f2 -> Expression()
    * f3 -> "]"
    * f4 -> "="
    * f5 -> Expression()
    * f6 -> ";"
    */

   public R visit(ArrayAssignmentStatement n, A argu) {
      R _ret = null;

      n.f0.accept(this, argu);
      String vname = n.f0.f0.tokenImage;
      n.f1.accept(this, argu);
      toStore = true;
      retAttr estruct1 = (retAttr) n.f2.accept(this, argu);
      toStore = false;
      String ecode1 = estruct1.code;
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      toStore = true;
      retAttr estruct2 = (retAttr) n.f5.accept(this, argu);
      toStore = false;
      String ecode2 = estruct2.code;
      n.f6.accept(this, argu);

      if(varMethMap.containsKey(vname)){
         retAttr astruct = varMethMap.get(vname);
         String acode = astruct.code;
         String szcode = getNewCode();
         // if(finalPrint) print("MOVE " + fcode + " 4");
         if(finalPrint) print("MOVE " + szcode + " TIMES " + ecode1 + " 4");
         if(finalPrint) print("MOVE " + szcode + " PLUS " + szcode + " 4");
         if(finalPrint) print("MOVE " + szcode + " PLUS " + szcode + " " + acode);
         if(finalPrint) print("HSTORE " + szcode + " 0 " + ecode2);
      }
      else{
         // in class
         int offset = 4;
         Pass1.classAttr cattr = classTable.get(curClass);
         for(Pass1.varAttr vattr: cattr.varList){
            if((vattr.name).equals(vname)){
               break;
            }
            offset += 4;
         }
         String vncode = getNewCode();
         if(finalPrint) print("HLOAD " + vncode + " TEMP 0 " + offset);
         String szcode = getNewCode();
         if(finalPrint) print("MOVE " + szcode + " TIMES " + ecode1 + " 4");
         if(finalPrint) print("MOVE " + szcode + " PLUS " + szcode + " 4");
         if(finalPrint) print("MOVE " + szcode + " PLUS " + szcode + " " + vncode);
         if(finalPrint) print("HSTORE " + szcode + " 0 " + ecode2);
      }
      return _ret;
   }
   /**
    * f0 -> IfthenElseStatement()
    * | IfthenStatement()
    */
   public R visit(IfStatement n, A argu) {
      R _ret = null;
      retAttr bstruct = (retAttr) n.f0.accept(this, argu);
      return (R) bstruct;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(IfthenStatement n, A argu) {
      R _ret = null;
      String elselabel = getNewLabel();
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      toStore = true;
      retAttr estruct = (retAttr) n.f2.accept(this, argu);
      toStore = false;
      String ecode = estruct.code;
      n.f3.accept(this, argu);
      if(finalPrint) print("CJUMP " + ecode + " " + elselabel);
      n.f4.accept(this, argu);
      if(finalPrint) print(elselabel);
      if(finalPrint) print("NOOP");
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    * f5 -> "else"
    * f6 -> Statement()
    */
   public R visit(IfthenElseStatement n, A argu) {
      R _ret = null;
      String elselabel = getNewLabel();
      String endlabel = getNewLabel();
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      toStore = true;
      retAttr estruct = (retAttr) n.f2.accept(this, argu);
      toStore = false;
      String ecode = estruct.code;
      n.f3.accept(this, argu);
      if(finalPrint) print("CJUMP " + ecode + " " + elselabel);
      n.f4.accept(this, argu);
      if(finalPrint) print("JUMP " + endlabel);
      n.f5.accept(this, argu);
      if(finalPrint) print(elselabel);
      n.f6.accept(this, argu);
      if(finalPrint) print(endlabel);
      if(finalPrint) print("NOOP");
      return _ret;
   }

   /**
    * f0 -> "while"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(WhileStatement n, A argu) {
      R _ret = null;
      String looplabel = getNewLabel();
      String endlabel = getNewLabel();
      n.f0.accept(this, argu);
      if(finalPrint) print(looplabel);
      n.f1.accept(this, argu);
      toStore = true;
      retAttr estruct = (retAttr) n.f2.accept(this, argu);
      toStore = false;
      String ecode = estruct.code;
      n.f3.accept(this, argu);
      if(finalPrint) print("CJUMP " + ecode + " " + endlabel);
      n.f4.accept(this, argu);
      if(finalPrint) print("JUMP " + looplabel);
      if(finalPrint) print(endlabel);
      if(finalPrint) print("NOOP");
      return _ret;
   }

   /**
    * f0 -> "do"
    * f1 -> Statement()
    * f2 -> "while"
    * f3 -> "("
    * f4 -> Expression()
    * f5 -> ")"
    * f6 -> ";"
    */
   public R visit(DoStatement n, A argu) {
      R _ret = null;
      String startlabel = getNewLabel();
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      if(finalPrint) print(startlabel);
      n.f3.accept(this, argu);
      toStore = true;
      retAttr estruct = (retAttr) n.f4.accept(this, argu);
      toStore = false;
      String ecode = estruct.code;
      String ncode = getNewCode();
      String ocode = getNewCode();
      if(finalPrint) print("MOVE " + ocode + " 1");
      if(finalPrint) print("MOVE " + ncode + " MINUS " + ocode + " " + ecode);
      if(finalPrint) print("CJUMP " + ncode + " " + startlabel);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      if(finalPrint) print("NOOP");
      return _ret;
   }

   /**
    * f0 -> "System.out.println"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> ";"
    */
   public R visit(PrintStatement n, A argu) {
      R _ret = null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      toStore = true;
      retAttr estruct = (retAttr) n.f2.accept(this, argu);
      toStore = false;
      String ecode = estruct.code;
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      if(finalPrint) print("PRINT " + ecode);
      return _ret;
   }

   /**
    * f0 -> OrExpression()
    * | AndExpression()
    * | CompareExpression()
    * | neqExpression()
    * | AddExpression()
    * | MinusExpression()
    * | TimesExpression()
    * | DivExpression()
    * | ArrayLookup()
    * | ArrayLength()
    * | MessageSend()
    * | PrimaryExpression()
    */
   public R visit(Expression n, A argu) {
      R _ret = null;
      retAttr estruct = (retAttr) n.f0.accept(this, argu);
      return (R) estruct;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "&&"
    * f2 -> PrimaryExpression()
    */
   public R visit(AndExpression n, A argu) {
      R _ret = null;
      String rcode = getNewCode();
      retAttr rstruct = new retAttr(rcode, "boolean");
      String firstlabel = getNewLabel();
      String endlabel = getNewLabel();
      retAttr pstruct1 = (retAttr) n.f0.accept(this, argu);
      if(debug){
         if(pstruct1 == null) print("AndExpr1 -- NULL FOUND");
      }
      String pcode1 = pstruct1.code;
      if(finalPrint) print("CJUMP " + pcode1 + " " + firstlabel);

      n.f1.accept(this, argu);
      retAttr pstruct2 = (retAttr) n.f2.accept(this, argu);
      if(debug){
         if(pstruct2 == null) print("AndExpr2 -- NULL FOUND");
      }
      String pcode2 = pstruct2.code;
      if(finalPrint) print("MOVE " + rcode + " " + pcode2);
      if(finalPrint) print("JUMP " + endlabel);

      if(finalPrint) print(firstlabel);
      if(finalPrint) print("MOVE " + rcode + " " + pcode1);

      if(finalPrint) print(endlabel);
      if(finalPrint) print("NOOP");
      return (R) rstruct;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "||"
    * f2 -> PrimaryExpression()
    */
   public R visit(OrExpression n, A argu) {
      R _ret = null;
      String rcode = getNewCode();
      retAttr rstruct = new retAttr(rcode, "boolean");
      String secondlabel = getNewLabel();
      String endlabel = getNewLabel();
      retAttr pstruct1 = (retAttr) n.f0.accept(this, argu);
      String pcode1 = pstruct1.code;
      if(finalPrint) print("CJUMP " + pcode1 + " " + secondlabel);
      if(finalPrint) print("MOVE " + rcode + " " + pcode1);
      if(finalPrint) print("JUMP " + endlabel);

      n.f1.accept(this, argu);
      if(finalPrint) print(secondlabel);
      retAttr pstruct2 = (retAttr) n.f2.accept(this, argu);
      String pcode2 = pstruct2.code;
      if(finalPrint) print("MOVE " + rcode + " " + pcode2);

      if(finalPrint) print(endlabel);
      if(finalPrint) print("NOOP");
      return (R) rstruct;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "<="
    * f2 -> PrimaryExpression()
    */
   public R visit(CompareExpression n, A argu) {
      R _ret = null;
      String rcode = getNewCode();
      retAttr rstruct = new retAttr(rcode, "boolean");
      retAttr pstruct1 = (retAttr) n.f0.accept(this, argu);
      String pcode1 = pstruct1.code;
      n.f1.accept(this, argu);
      retAttr pstruct2 = (retAttr) n.f2.accept(this, argu);
      String pcode2 = pstruct2.code;
      if(finalPrint) print("MOVE " + rcode + " LE " + pcode1 + " " + pcode2);

      return (R) rstruct;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "!="
    * f2 -> PrimaryExpression()
    */
   public R visit(neqExpression n, A argu) {
      R _ret = null;
      String rcode = getNewCode();
      retAttr rstruct = new retAttr(rcode, "boolean");
      retAttr pstruct1 = (retAttr) n.f0.accept(this, argu);
      String pcode1 = pstruct1.code;
      n.f1.accept(this, argu);
      retAttr pstruct2 = (retAttr) n.f2.accept(this, argu);
      String pcode2 = pstruct2.code;
      if(finalPrint) print("MOVE " + rcode + " NE " + pcode1 + " " + pcode2);

      return (R) rstruct;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "+"
    * f2 -> PrimaryExpression()
    */
   public R visit(AddExpression n, A argu) {
      R _ret = null;
      String rcode = getNewCode();
      retAttr rstruct = new retAttr(rcode, "int");
      retAttr pstruct1 = (retAttr) n.f0.accept(this, argu);
      String pcode1 = pstruct1.code;
      n.f1.accept(this, argu);
      retAttr pstruct2 = (retAttr) n.f2.accept(this, argu);
      String pcode2 = pstruct2.code;
      if(finalPrint) print("MOVE " + rcode + " PLUS " + pcode1 + " " + pcode2);

      return (R) rstruct;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "-"
    * f2 -> PrimaryExpression()
    */
   public R visit(MinusExpression n, A argu) {
      R _ret = null;
      String rcode = getNewCode();
      retAttr rstruct = new retAttr(rcode, "int");
      retAttr pstruct1 = (retAttr) n.f0.accept(this, argu);
      String pcode1 = pstruct1.code;
      n.f1.accept(this, argu);
      retAttr pstruct2 = (retAttr) n.f2.accept(this, argu);
      String pcode2 = pstruct2.code;
      if(finalPrint) print("MOVE " + rcode + " MINUS " + pcode1 + " " + pcode2);

      return (R) rstruct;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "*"
    * f2 -> PrimaryExpression()
    */
   public R visit(TimesExpression n, A argu) {
      R _ret = null;
      String rcode = getNewCode();
      retAttr rstruct = new retAttr(rcode, "int");
      retAttr pstruct1 = (retAttr) n.f0.accept(this, argu);
      String pcode1 = pstruct1.code;
      n.f1.accept(this, argu);
      retAttr pstruct2 = (retAttr) n.f2.accept(this, argu);
      String pcode2 = pstruct2.code;
      if(finalPrint) print("MOVE " + rcode + " TIMES " + pcode1 + " " + pcode2);

      return (R) rstruct;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "/"
    * f2 -> PrimaryExpression()
    */
   public R visit(DivExpression n, A argu) {
      R _ret = null;
      String rcode = getNewCode();
      retAttr rstruct = new retAttr(rcode, "int");
      retAttr pstruct1 = (retAttr) n.f0.accept(this, argu);
      String pcode1 = pstruct1.code;
      n.f1.accept(this, argu);
      retAttr pstruct2 = (retAttr) n.f2.accept(this, argu);
      String pcode2 = pstruct2.code;
      if(finalPrint) print("MOVE " + rcode + " DIV " + pcode1 + " " + pcode2);

      return (R) rstruct;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "["
    * f2 -> PrimaryExpression()
    * f3 -> "]"
    */
   public R visit(ArrayLookup n, A argu) {
      R _ret = null;
      String rcode = getNewCode();
      retAttr rstruct = new retAttr(rcode, "int");
      retAttr astruct = (retAttr) n.f0.accept(this, argu);
      String acode = astruct.code;
      n.f1.accept(this, argu);
      retAttr istruct = (retAttr) n.f2.accept(this, argu);
      String icode = istruct.code;
      n.f3.accept(this, argu);
      String idxcode = getNewCode();
      String arrcode = getNewCode();
      if(finalPrint) print("MOVE " + idxcode + " PLUS " + icode + " 1");
      if(finalPrint) print("MOVE " + idxcode + " TIMES " + idxcode + " 4");
      if(finalPrint) print("MOVE " + arrcode + " PLUS " + acode + " " + idxcode);
      if(finalPrint) print("HLOAD " + rcode + " " + arrcode + " 0");
      return (R) rstruct;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> "length"
    */
   public R visit(ArrayLength n, A argu) {
      R _ret = null;
      String rcode = getNewCode();
      retAttr rstruct = new retAttr(rcode, "int");
      retAttr astruct = (retAttr) n.f0.accept(this, argu);
      String acode = astruct.code;
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);

      if(finalPrint) print("HLOAD " + rcode + " " + acode + " 0");
      if(finalPrint) print("MOVE " + rcode + " MINUS " + rcode + " 1");
      return (R) rstruct;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( ExpressionList() )?
    * f5 -> ")"
    */

   // DO THIS
   public R visit(MessageSend n, A argu) {
      R _ret = null;
      retAttr vstruct = (retAttr) n.f0.accept(this, argu);
      String vcode = vstruct.code;
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);

      String mname = (String) n.f2.f0.tokenImage;
      String cname = vstruct.type; // type will be class
      Pass1.methAttr mattr = getMeth(mname, cname);
      String rcode = getNewCode();
      retAttr rstruct = new retAttr(rcode, mattr.retType);

      n.f3.accept(this, argu);
      String vtcode = getNewCode();
      String mcode = getNewCode();
      if(finalPrint) print("HLOAD " + vtcode + " " + vstruct.code + " 0"); // load the vtable
      if(finalPrint) print("HLOAD " + mcode + " " + vtcode + " " + mattr.offset);
      ArrayList<String> args = new ArrayList<String>();
      n.f4.accept(this, (A) args);
      n.f5.accept(this, argu);

      String msgCall = "MOVE " + rcode + " CALL " + mcode + " ( " + vcode;
      for(String arg: args){
         msgCall += " " + arg;
      }
      msgCall += " )";
      if(finalPrint) print(msgCall);
		return (R) rstruct;
   }

   /**
    * f0 -> Expression()
    * f1 -> ( ExpressionRest() )*
    */
   public R visit(ExpressionList n, A argu) {
      R _ret = null;
      ArrayList<String> args = (ArrayList<String>) argu;
      retAttr estruct = (retAttr) n.f0.accept(this, argu);
      String ecode = estruct.code;
      args.add(ecode);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Expression()
    */
   public R visit(ExpressionRest n, A argu) {
      R _ret = null;
      ArrayList<String> args = (ArrayList<String>) argu;
      n.f0.accept(this, argu);
      retAttr estruct = (retAttr) n.f1.accept(this, argu);
      String ecode = estruct.code;
      args.add(ecode);
      return _ret;
   }

   /**
    * f0 -> IntegerLiteral()
    * | TrueLiteral()
    * | FalseLiteral()
    * | Identifier()
    * | ThisExpression()
    * | ArrayAllocationExpression()
    * | AllocationExpression()
    * | NotExpression()
    * | BracketExpression()
    */

   
   public R visit(PrimaryExpression n, A argu) {
      R _ret = null;
      retAttr pstruct = (retAttr) n.f0.accept(this, argu);
      return (R) pstruct;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
      R _ret = null;
      n.f0.accept(this, argu);
      String intVal = (String) n.f0.tokenImage;
      String icode = getNewCode();
      retAttr istruct = new retAttr(icode, "int");
      if(finalPrint) print("MOVE " + icode + " " + intVal);
      return (R) istruct;
   }

   /**
    * f0 -> "true"
    */
   public R visit(TrueLiteral n, A argu) {
      R _ret = null;
      String tcode = getNewCode();
      retAttr tstruct = new retAttr(tcode, "boolean");
      n.f0.accept(this, argu);
      if(finalPrint) print("MOVE " + tcode + " 1");
      return (R) tstruct;
   }

   /**
    * f0 -> "false"
    */
   public R visit(FalseLiteral n, A argu) {
      R _ret = null;
      String fcode = getNewCode();
      retAttr fstruct = new retAttr(fcode, "boolean");
      n.f0.accept(this, argu);
      if(finalPrint) print("MOVE " + fcode + " 0");
      return (R) fstruct;
   }

   /**
    * f0 -> <IDENTIFIER>
    */

   // DO THIS 
   public R visit(Identifier n, A argu) {
      R _ret = null;
      n.f0.accept(this, argu);
      String idname = (String) n.f0.tokenImage;
      if(varMethMap.containsKey(idname)){
         // its in the current method list
         retAttr rstruct = varMethMap.get(idname);
         return (R) rstruct;
      }
      Pass1.classAttr cattr = classTable.get(curClass);
      int offset = 4;
      String idtype = "-1";
      for(Pass1.varAttr vattr: cattr.varList){
         if((vattr.name).equals(idname)){
            idtype = vattr.type; 
            String idcode = getNewCode();
            if(finalPrint && toStore) print("HLOAD " + idcode + " TEMP 0 " + offset);
            retAttr rstruct = new retAttr(idcode, idtype);
            // if(idcode.equals("TEMP 3")){
            //    print("FOUND IN IDENT");
            // }
            return (R) rstruct;
         }
         offset += 4;
      }
      // String idcode = getNewCode();
      // if(finalPrint) print("HSTORE " + "TEMP 0 " + offset + " " + idcode);
      retAttr rstruct = new retAttr(idname, idtype);
      return (R) rstruct;
   }

   /**
    * f0 -> "this"
    */
   public R visit(ThisExpression n, A argu) {
      R _ret = null;
      n.f0.accept(this, argu);
      retAttr tstruct = new retAttr("TEMP 0", curClass);
      return (R) tstruct;
   }

   /**
    * f0 -> "new"
    * f1 -> "int"
    * f2 -> "["
    * f3 -> Expression()
    * f4 -> "]"
    */
   public R visit(ArrayAllocationExpression n, A argu) {
      R _ret = null;
      String arcode = getNewCode();
      retAttr arrstruct = new retAttr(arcode, "int[]");
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      retAttr astruct = (retAttr) n.f3.accept(this, argu);
      String asize = astruct.code;
      n.f4.accept(this, argu);
      String aszCode = getNewCode();
      String hszCode = getNewCode();

      if(finalPrint) print("MOVE " + aszCode + " PLUS " + asize + " 1");
      if(finalPrint) print("MOVE " + hszCode + " TIMES " + aszCode + " 4");
      if(finalPrint) print("MOVE " + arcode + " HALLOCATE " + hszCode);
      if(finalPrint) print("HSTORE " + arcode + " 0 " + aszCode); // store the array size

      String loopLabel = getNewLabel();
      String endLabel = getNewLabel();

      String zcode = getNewCode();
      String icode = getNewCode();
      String aelemCode = getNewCode();
      String statCode = getNewCode();

      if(finalPrint) print("MOVE " + zcode + " 0");
      if(finalPrint) print("MOVE " + icode + " 4"); // initial index 4
      if(finalPrint) print("MOVE " + hszCode + " MINUS " + hszCode + " 4"); // keeping the size as original (ignore the size entry)

      if(finalPrint) print(loopLabel);

      if(finalPrint) print("MOVE " + statCode + " LE " + icode + " " + hszCode); // index <= size
      if(finalPrint) print("CJUMP " + statCode + " " + endLabel);
      if(finalPrint) print("MOVE " + aelemCode + " PLUS " + icode + " " + arcode); // a + idx*4
      if(finalPrint) print("HSTORE " + aelemCode + " 0 " + zcode); // init
      if(finalPrint) print("MOVE " + icode + " PLUS " + icode + " 4"); // idx += 1 (4 actually)
      if(finalPrint) print("JUMP " + loopLabel);

      if(finalPrint) print(endLabel);
      if(finalPrint) print("NOOP"); // why??

      return (R) arrstruct;
   }

   /**
    * f0 -> "new"
    * f1 -> Identifier()
    * f2 -> "("
    * f3 -> ")"
    */
   public R visit(AllocationExpression n, A argu) {
      R _ret = null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String cname = n.f1.f0.tokenImage;
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      retAttr cstruct = createNewClass(cname);
      String rcode = getNewCode();
      String rtype = cstruct.type;
      retAttr rstruct = new retAttr(rcode, rtype);
      print("MOVE " + rcode + " " + cstruct.code);
      return (R) rstruct;
      // return (R) cstruct;
   }

   /**
    * f0 -> "!"
    * f1 -> Expression()
    */
   public R visit(NotExpression n, A argu) {
      R _ret = null;
      String ncode = getNewCode();
      retAttr nstruct = new retAttr(ncode, "boolean");
      String one = getNewCode();
      if(finalPrint) print("MOVE " + one + " 1");
      n.f0.accept(this, argu);
      retAttr estruct = (retAttr) n.f1.accept(this, argu);
      String ecode = estruct.code;
      if(finalPrint) print("MOVE " + ncode + " MINUS " + one + " " + ecode);
      return (R) nstruct;
   }

   /**
    * f0 -> "("
    * f1 -> Expression()
    * f2 -> ")"
    */
   public R visit(BracketExpression n, A argu) {
      R _ret = null;
      n.f0.accept(this, argu);
      retAttr estruct = (retAttr) n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return (R) estruct;
   }

   /**
    * f0 -> Identifier()
    * f1 -> ( IdentifierRest() )*
    */
   public R visit(IdentifierList n, A argu) {
      R _ret = null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Identifier()
    */
   public R visit(IdentifierRest n, A argu) {
      R _ret = null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

}
