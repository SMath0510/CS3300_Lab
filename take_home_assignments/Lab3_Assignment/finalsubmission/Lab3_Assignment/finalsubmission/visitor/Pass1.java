//
// Generated by JTB 1.3.2
//

package visitor;

import syntaxtree.*;
import visitor.Pass1.methAttr;
import visitor.Pass1.varAttr;

import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order. Your visitors may extend this class.
 */
public class Pass1<R, A> implements GJVisitor<R, A> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //

   int debug = 0;
   boolean printDebug = false;
   String curClass = "-1";
   String curMethod = "-1";

   public enum LOC {
      CLASS, METHOD, ARG
      // class field OR method field OR method arguments
   }

   public static class varAttr {
      public String name; // Name of the variable
      public String type; // Type of the variable
      public String cname; // Class that it originally belongs to
      public String mname; // Method that it belongs to (if not method then null)
      public Integer offset; // Offset required by the variable
      public LOC loc; // current location of the variable

      varAttr(String name, String type, String cname, String mname) {
         this.name = name;
         this.type = type;
         this.cname = cname;
         this.mname = mname;
      }

      varAttr(String name, String type, String cname, String mname, Integer offset, LOC loc) {
         this.name = name;
         this.type = type;
         this.cname = cname;
         this.mname = mname;
         this.offset = offset;
         this.loc = loc;
      }

      public varAttr copy() {
         return new varAttr(name, type, cname, mname, offset, loc);
      }
   }

   public static class methAttr {
      public String cname; // Class that this belongs to
      public String name; // Name of the method
      public String code; // Code for the method
      public String retType; // Return type of the method
      public Integer offset; // Offset required by the method
      public ArrayList<varAttr> varList; // Variable list
      public ArrayList<varAttr> argList; // Argument list

      methAttr(String name, String retType, String cname) {
         this.name = name;
         this.retType = retType;
         this.cname = cname;
         varList = new ArrayList<varAttr>();
         argList = new ArrayList<varAttr>();
      }

      public methAttr copy() {
         methAttr mattr = new methAttr(name, retType, cname);
         mattr.code = code;
         mattr.offset = offset;
         mattr.varList = new ArrayList<varAttr>();
         mattr.argList = new ArrayList<varAttr>();
         for (varAttr v : varList) {
            mattr.varList.add(v.copy()); // Need to specifically add copies of the list elements
         }
         for (varAttr v : argList) {
            mattr.argList.add(v.copy()); // Need to specifically add copies of the list elements
         }
         return mattr;
      }
   }

   public static class classAttr {
      public String name; // name of the class
      public String parent; // name of the parent (if none then null)
      public ArrayList<varAttr> varList; // list of class fields
      public ArrayList<methAttr> methList; // list of class methods

      classAttr(String name, String parent) {
         this.name = name;
         this.parent = parent;
         varList = new ArrayList<varAttr>();
         methList = new ArrayList<methAttr>();
      }
   }

   public static class retAttr {
      // return attribute from the functions
      String code; // code of the attribute
      String type; // type of the attribute
      retAttr(String code, String type) {
         this.code = code;
         this.type = type;
      }
   }

   public Map<String, classAttr> classTable1 = new HashMap<String, classAttr>();
   public Map<String, classAttr> classTable2 = new HashMap<String, classAttr>();

   public void printStuff1() {
      for (Map.Entry<String, classAttr> entry : classTable1.entrySet()) {
         String cname = entry.getKey();
         classAttr cattr = entry.getValue();
         System.out.println("Class: " + cname);
         System.out.println("Parent Class: " + cattr.parent);
         for (varAttr vattr: cattr.varList) {
            String vname = vattr.name;
            String vtype = vattr.type;
            System.out.println("\tVarName: " + vname + "; Type: " + vtype);
         }
         for (methAttr mattr: cattr.methList) {
            String mname = mattr.name;
            String cname1 = mattr.cname;
            System.out.println("\tMethod: " + mname + "; Class: " + cname1);
            System.out.println("\tArguments: ");
            for (varAttr vattr: mattr.argList) {
               String vname = vattr.name;
               String vtype = vattr.type;
               System.out.println("\t\t ArgName: " + vname + "; Type: " + vtype);
            }
            System.out.println("\tVariables: ");
            for (varAttr vattr: mattr.varList) {
               String vname = vattr.name;
               String vtype = vattr.type;
               System.out.println("\t\tVarName: " + vname + "; Type: " + vtype);
            }
         }
      }
   }

   public void print(String s){
      System.out.println(s);
   }

   void constructTableHelper(String cname) {
      if(printDebug) print("Helper called for " + cname);
      Pass1.classAttr cattr = classTable1.get(cname);
      String pname = cattr.parent;
      if(printDebug) print("\tParent of the class is " + pname);
      if (pname.equals("-1")) {
         if(printDebug) print("Parent is empty");
         Pass1.classAttr fcattr = new classAttr(cname, pname);
         for (Pass1.varAttr cvattr : cattr.varList) {
            fcattr.varList.add(cvattr);
         }
         for (Pass1.methAttr cmattr : cattr.methList) {
            fcattr.methList.add(cmattr);
         }
         if(printDebug) print("Inserting the class " + cname + " into the CT2");
         classTable2.put(cname, fcattr);
      } else if (classTable2.containsKey(pname)) {
         // already constructed parent class
         
         if(printDebug) print("Parent " + pname + " has already been constructed");
         Pass1.classAttr fcattr = new classAttr(cname, pname);
         Pass1.classAttr pcattr = classTable2.get(pname);

         for (Pass1.varAttr cvattr : pcattr.varList) {
            fcattr.varList.add(cvattr);
         }
         for (Pass1.varAttr cvattr : cattr.varList) {
            fcattr.varList.add(cvattr);
         }

         Map<String, Integer> methIdx = new HashMap<String, Integer>();
         ;
         int idx = 0;
         for (Pass1.methAttr cmattr : pcattr.methList) {
            fcattr.methList.add(cmattr);
            methIdx.put(cmattr.name, idx);
            idx++;
         }

         for (Pass1.methAttr cmattr : cattr.methList) {
            if (!methIdx.containsKey(cmattr.name)) {
               if(printDebug) print("Added the method " + cmattr.name + " to the list");
               fcattr.methList.add(cmattr);
            } else {
               if(printDebug) print("Replaced the method " + cmattr.name + " in the list");
               int midx = methIdx.get(cmattr.name);
               fcattr.methList.remove(midx);
               fcattr.methList.add(midx, cmattr);
            }
         }

         if(printDebug) print("Inserting the class " + cname + " into the CT2");
         classTable2.put(cname, fcattr);
      } else {
         // its parent hasn't been computed yet
         if(printDebug) print("Computing its parent's object struct + " + pname);
         constructTableHelper(pname);
         constructTableHelper(cname);
      }
   }

   public void printStuff2() {
      for (Map.Entry<String, Pass1.classAttr> entry : classTable2.entrySet()) {
         String cname = entry.getKey();
         Pass1.classAttr cattr = entry.getValue();
         System.out.println("Class: " + cname);
         System.out.println("Parent Class: " + cattr.parent);
         for (Pass1.varAttr vattr : cattr.varList) {
            String vname = vattr.name;
            String vtype = vattr.type;
            String vcname = vattr.cname;
            String vmname = vattr.mname;
            int voff = vattr.offset;
            System.out
                  .println("\t VarName: " + vname + "; Type: " + vtype + "; Class: " + vcname + "; Method: " + vmname + "; Offset: " + voff);
         }
         for (Pass1.methAttr mattr : cattr.methList) {
            String mname = mattr.name;
            String mcname = mattr.cname;
            int moff = mattr.offset;
            String mcode = mattr.code;
            System.out.println("\tMethod: " + mname + "; Class: " + mcname + "; Code: " + mcode + "; Offset: " + moff);
            System.out.println("\tArguments: ");
            for (Pass1.varAttr vattr : mattr.argList) {
               String vname = vattr.name;
               String vtype = vattr.type;
               String vcname = vattr.cname;
               String vmname = vattr.mname;
               System.out.println("\t\t VarName: " + vname + "; Type: " + vtype + "; Class: " + vcname + "; Method: " + vmname);
            }
            System.out.println("\tVariables: ");
            for (Pass1.varAttr vattr : mattr.varList) {
               String vname = vattr.name;
               String vtype = vattr.type;
               String vcname = vattr.cname;
               String vmname = vattr.mname;
               System.out.println("\t\t VarName: " + vname + "; Type: " + vtype + "; Class: " + vcname + "; Method: " + vmname);
            }
         }
      }
   }

   public void constructTable() {
      for (Map.Entry<String, classAttr> entry : classTable1.entrySet()) {
         String cname = entry.getKey();
         if (!classTable2.containsKey(cname)) {
            constructTableHelper(cname);
         }
         classAttr cattr = classTable2.get(cname);
         int idx = 0;
         for(methAttr mattr : cattr.methList){
            mattr.offset = idx * 4;
            mattr.code = mattr.cname + "_" + mattr.name;
            idx ++;
         }
         idx = 1;
         for(varAttr vattr : cattr.varList){
            vattr.offset = idx * 4;
            idx ++;
         }
      }
      if(debug == 1) printStuff2();
   }

   public R visit(NodeList n, A argu) {
      R _ret = null;
      int _count = 0;
      for (Enumeration<Node> e = n.elements(); e.hasMoreElements();) {
         e.nextElement().accept(this, argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
      if (n.present()) {
         R _ret = null;
         int _count = 0;
         for (Enumeration<Node> e = n.elements(); e.hasMoreElements();) {
            e.nextElement().accept(this, argu);
            _count++;
         }
         return _ret;
      } else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if (n.present())
         return n.node.accept(this, argu);
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret = null;
      int _count = 0;
      for (Enumeration<Node> e = n.elements(); e.hasMoreElements();) {
         e.nextElement().accept(this, argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) {
      return null;
   }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> MainClass()
    * f1 -> ( TypeDeclaration() )*
    * f2 -> <EOF>
    */
   public R visit(Goal n, A argu) {
      R _ret = null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      // printStuff1();
      constructTable();
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> "public"
    * f4 -> "static"
    * f5 -> "void"
    * f6 -> "main"
    * f7 -> "("
    * f8 -> "String"
    * f9 -> "["
    * f10 -> "]"
    * f11 -> Identifier()
    * f12 -> ")"
    * f13 -> "{"
    * f14 -> PrintStatement()
    * f15 -> "}"
    * f16 -> "}"
    */
   public R visit(MainClass n, A argu) {
      R _ret = null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String cname = (String) n.f1.f0.tokenImage;
      classAttr new_cattr = new classAttr(cname, "-1");
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      n.f10.accept(this, argu);
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      n.f13.accept(this, argu);
      n.f14.accept(this, argu);
      n.f15.accept(this, argu);
      n.f16.accept(this, argu);
      classTable1.put(cname, new_cattr);
      return _ret;
   }

   /**
    * f0 -> ClassDeclaration()
    * | ClassExtendsDeclaration()
    */
   public R visit(TypeDeclaration n, A argu) {
      R _ret = null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> ( VarDeclaration() )*
    * f4 -> ( MethodDeclaration() )*
    * f5 -> "}"
    */
   public R visit(ClassDeclaration n, A argu) {
      R _ret = null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String cname = (String) n.f1.f0.tokenImage;
      curClass = cname;
      classAttr new_cattr = new classAttr(cname, "-1");
      n.f2.accept(this, argu);
      n.f3.accept(this, (A) new_cattr.varList);
      n.f4.accept(this, (A) new_cattr.methList);
      n.f5.accept(this, argu);
      classTable1.put(cname, new_cattr);
      curClass = "-1";
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "extends"
    * f3 -> Identifier()
    * f4 -> "{"
    * f5 -> ( VarDeclaration() )*
    * f6 -> ( MethodDeclaration() )*
    * f7 -> "}"
    */
   public R visit(ClassExtendsDeclaration n, A argu) {
      R _ret = null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String cname = (String) n.f1.f0.tokenImage;
      curClass = cname;
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      String pname = (String) n.f3.f0.tokenImage;
      classAttr new_cattr = new classAttr(cname, pname);
      n.f4.accept(this, argu);
      n.f5.accept(this, (A) new_cattr.varList);
      n.f6.accept(this, (A) new_cattr.methList);
      n.f7.accept(this, argu);
      classTable1.put(cname, new_cattr);
      curClass = "-1";
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    * f2 -> ";"
    */
   public R visit(VarDeclaration n, A argu) {
      R _ret = null;
      ArrayList<varAttr> vlist = (ArrayList<varAttr>) argu;
      String vtype = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String vname = n.f1.f0.tokenImage;
      n.f2.accept(this, argu);

      varAttr new_vattr = new varAttr(vname, vtype, curClass, curMethod);
      vlist.add(new_vattr);
      return _ret;
   }

   /**
    * f0 -> "public"
    * f1 -> Type()
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( FormalParameterList() )?
    * f5 -> ")"
    * f6 -> "{"
    * f7 -> ( VarDeclaration() )*
    * f8 -> ( Statement() )*
    * f9 -> "return"
    * f10 -> Expression()
    * f11 -> ";"
    * f12 -> "}"
    */
   public R visit(MethodDeclaration n, A argu) {
      R _ret = null;
      ArrayList<methAttr> mlist = (ArrayList<methAttr>) argu;
      n.f0.accept(this, argu);
      String retType = (String) n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      String mname = (String) n.f2.f0.tokenImage;
      curMethod = mname;
      methAttr new_mattr = new methAttr(mname, retType, curClass);
      n.f3.accept(this, argu);
      n.f4.accept(this, (A) new_mattr.argList);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, (A) new_mattr.varList);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      n.f10.accept(this, argu);
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      mlist.add(new_mattr);
      curMethod = "-1";
      return _ret;
   }

   /**
    * f0 -> FormalParameter()
    * f1 -> ( FormalParameterRest() )*
    */
   public R visit(FormalParameterList n, A argu) {
      R _ret = null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    */
   public R visit(FormalParameter n, A argu) {
      R _ret = null;
      ArrayList<varAttr> alist = (ArrayList<varAttr>) argu;
      String name = (String) n.f1.f0.tokenImage;
      String type = (String) n.f0.accept(this, argu);
      varAttr new_vattr = new varAttr(name, type, curClass, curMethod);
      alist.add(new_vattr);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> FormalParameter()
    */
   public R visit(FormalParameterRest n, A argu) {
      R _ret = null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ArrayType()
    * | BooleanType()
    * | IntegerType()
    * | Identifier()
    */
   public R visit(Type n, A argu) {
      R _ret = null;
      String type = (String) n.f0.accept(this, argu);
      return (R) type;
   }

   /**
    * f0 -> "int"
    * f1 -> "["
    * f2 -> "]"
    */
   public R visit(ArrayType n, A argu) {
      R _ret = null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return (R) "int[]";
   }

   /**
    * f0 -> "boolean"
    */
   public R visit(BooleanType n, A argu) {
      R _ret = null;
      n.f0.accept(this, argu);
      return (R) "boolean";
   }

   /**
    * f0 -> "int"
    */
   public R visit(IntegerType n, A argu) {
      R _ret = null;
      n.f0.accept(this, argu);
      return (R) "int";
   }

   /**
    * f0 -> Block()
    * | AssignmentStatement()
    * | ArrayAssignmentStatement()
    * | IfStatement()
    * | WhileStatement()
    * | DoStatement()
    * | PrintStatement()
    */
   public R visit(Statement n, A argu) {
      R _ret = null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "{"
    * f1 -> ( Statement() )*
    * f2 -> "}"
    */
   public R visit(Block n, A argu) {
      R _ret = null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "="
    * f2 -> Expression()
    * f3 -> ";"
    */
   public R visit(AssignmentStatement n, A argu) {
      R _ret = null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "["
    * f2 -> Expression()
    * f3 -> "]"
    * f4 -> "="
    * f5 -> Expression()
    * f6 -> ";"
    */
   public R visit(ArrayAssignmentStatement n, A argu) {
      R _ret = null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> IfthenElseStatement()
    * | IfthenStatement()
    */
   public R visit(IfStatement n, A argu) {
      R _ret = null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(IfthenStatement n, A argu) {
      R _ret = null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    * f5 -> "else"
    * f6 -> Statement()
    */
   public R visit(IfthenElseStatement n, A argu) {
      R _ret = null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "while"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(WhileStatement n, A argu) {
      R _ret = null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "do"
    * f1 -> Statement()
    * f2 -> "while"
    * f3 -> "("
    * f4 -> Expression()
    * f5 -> ")"
    * f6 -> ";"
    */
   public R visit(DoStatement n, A argu) {
      R _ret = null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "System.out.println"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> ";"
    */
   public R visit(PrintStatement n, A argu) {
      R _ret = null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> OrExpression()
    * | AndExpression()
    * | CompareExpression()
    * | neqExpression()
    * | AddExpression()
    * | MinusExpression()
    * | TimesExpression()
    * | DivExpression()
    * | ArrayLookup()
    * | ArrayLength()
    * | MessageSend()
    * | PrimaryExpression()
    */
   public R visit(Expression n, A argu) {
      R _ret = null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "&&"
    * f2 -> PrimaryExpression()
    */
   public R visit(AndExpression n, A argu) {
      R _ret = null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "||"
    * f2 -> PrimaryExpression()
    */
   public R visit(OrExpression n, A argu) {
      R _ret = null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "<="
    * f2 -> PrimaryExpression()
    */
   public R visit(CompareExpression n, A argu) {
      R _ret = null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "!="
    * f2 -> PrimaryExpression()
    */
   public R visit(neqExpression n, A argu) {
      R _ret = null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "+"
    * f2 -> PrimaryExpression()
    */
   public R visit(AddExpression n, A argu) {
      R _ret = null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "-"
    * f2 -> PrimaryExpression()
    */
   public R visit(MinusExpression n, A argu) {
      R _ret = null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "*"
    * f2 -> PrimaryExpression()
    */
   public R visit(TimesExpression n, A argu) {
      R _ret = null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "/"
    * f2 -> PrimaryExpression()
    */
   public R visit(DivExpression n, A argu) {
      R _ret = null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "["
    * f2 -> PrimaryExpression()
    * f3 -> "]"
    */
   public R visit(ArrayLookup n, A argu) {
      R _ret = null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> "length"
    */
   public R visit(ArrayLength n, A argu) {
      R _ret = null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( ExpressionList() )?
    * f5 -> ")"
    */
   public R visit(MessageSend n, A argu) {
      R _ret = null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Expression()
    * f1 -> ( ExpressionRest() )*
    */
   public R visit(ExpressionList n, A argu) {
      R _ret = null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Expression()
    */
   public R visit(ExpressionRest n, A argu) {
      R _ret = null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> IntegerLiteral()
    * | TrueLiteral()
    * | FalseLiteral()
    * | Identifier()
    * | ThisExpression()
    * | ArrayAllocationExpression()
    * | AllocationExpression()
    * | NotExpression()
    * | BracketExpression()
    */
   public R visit(PrimaryExpression n, A argu) {
      R _ret = null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
      R _ret = null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "true"
    */
   public R visit(TrueLiteral n, A argu) {
      R _ret = null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "false"
    */
   public R visit(FalseLiteral n, A argu) {
      R _ret = null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Identifier n, A argu) {
      R _ret = null;
      n.f0.accept(this, argu);
      String idname = (String) n.f0.tokenImage;
      return (R) idname;
   }

   /**
    * f0 -> "this"
    */
   public R visit(ThisExpression n, A argu) {
      R _ret = null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "new"
    * f1 -> "int"
    * f2 -> "["
    * f3 -> Expression()
    * f4 -> "]"
    */
   public R visit(ArrayAllocationExpression n, A argu) {
      R _ret = null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "new"
    * f1 -> Identifier()
    * f2 -> "("
    * f3 -> ")"
    */
   public R visit(AllocationExpression n, A argu) {
      R _ret = null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "!"
    * f1 -> Expression()
    */
   public R visit(NotExpression n, A argu) {
      R _ret = null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "("
    * f1 -> Expression()
    * f2 -> ")"
    */
   public R visit(BracketExpression n, A argu) {
      R _ret = null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> ( IdentifierRest() )*
    */
   public R visit(IdentifierList n, A argu) {
      R _ret = null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Identifier()
    */
   public R visit(IdentifierRest n, A argu) {
      R _ret = null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

}
