//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

import visitor.Pass1.blockAttr;
import visitor.Pass1.funcAttr;
import visitor.Pass1.intervalAttr;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class Pass2<R,A> implements GJVisitor<R,A> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //

   Integer line_count = 1;
   Integer arg_cnt = 0;
   Integer curr_vstatus = 1;
   Boolean label_check = true;
   Boolean count_args = false;
   Map<String, funcAttr> func_list = new HashMap<String, funcAttr>();
   funcAttr curr_func = new funcAttr("-1");
   Integer curr_stack_pointer = 0;
   Boolean print_debug = false;
   Boolean debug = false;
   Boolean print_statement = true;
   Boolean print_comments = true;
   Boolean chahel_vass = false;
   ArrayList<String> reg_list = new ArrayList<>(Arrays.asList("s0", "s1", "s2", "s3", "s4", "s5", "s6", "s7", "t0", "t1", "t2", "t3", "t4", "t5", "t6", "t7", "t8", "t9", "v1", "v0", "a0", "a1", "a2", "a3"));

   public Pass2(Map<String, funcAttr> p1_func_list){
      func_list = p1_func_list;
   }

   public void flip_vstatus(){
      curr_vstatus = 1 - curr_vstatus;
   }

   public void print_all(){
      for(Map.Entry<String, funcAttr> elem1 : func_list.entrySet()){
         funcAttr func = elem1.getValue();
         System.out.println("FUNCTION " + func.name);
         for(Map.Entry<String, intervalAttr> elem2 : func.range_map.entrySet()){
            intervalAttr interval = elem2.getValue();
            interval.print();
         }
      }
   }

   public void print(String str){
      if(print_statement) System.out.println(str);
   }

   public void calle_store(){
      for(int i=0; i<8; i++) {
         print("\tASTORE SPILLEDARG " + curr_stack_pointer +" s" + i);
         curr_stack_pointer ++;
      }
   }

   public void calle_load(){
      for(int i=7; i>=0; i--){
         curr_stack_pointer --;
         print("\tALOAD s" + i + " SPILLEDARG " + curr_stack_pointer);
      }
   }

   public void caller_store(){
      for(int i=0; i<10; i++){
			print("\tASTORE SPILLEDARG " + curr_stack_pointer + " t" + i);
         curr_stack_pointer ++;
      }
   }

   public void caller_load(){
      for(int i=9; i>=0; i--){
         curr_stack_pointer --;
         print("\tALOAD t" + i + " SPILLEDARG " + curr_stack_pointer);
      }
   }

   public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) { return null; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> "MAIN"
    * f1 -> StmtList()
    * f2 -> "END"
    * f3 -> ( Procedure() )*
    * f4 -> <EOF>
    */
    // done
   public R visit(Goal n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String func_name = "MAIN";
      curr_func = func_list.get(func_name);
      curr_stack_pointer = curr_func.curr_stack_pointer;
      print(func_name + " [" + curr_func.num_args + "] [" + curr_func.stack_capacity + "] [" + curr_func.max_args + "]");
      line_count ++;
      n.f1.accept(this, argu);
      print("END");
      n.f2.accept(this, argu);
      line_count ++;
      if(curr_func.spilled_check) print("// SPILLED");
      else print("// NOTSPILLED");

      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      if(print_debug) print_all();
      return _ret;
   }

   /**
    * f0 -> ( ( Label() )? Stmt() )*
    */
    // done
   public R visit(StmtList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Label()
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> StmtExp()
    */
   // done
   public R visit(Procedure n, A argu) {
      R _ret=null;
      label_check = false;
      n.f0.accept(this, argu);
      label_check = true;
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      String func_name = (String) n.f0.f0.tokenImage;
      curr_func = func_list.get(func_name);
      curr_stack_pointer = curr_func.curr_stack_pointer;
      print(func_name + " [" + curr_func.num_args + "] [" + curr_func.stack_capacity + "] [" + curr_func.max_args + "]");

      calle_store();
      line_count ++;

      // restore_args(curr_func);
      String alloc_register = "-1";
      for(int i=0; i < Math.min(4, curr_func.num_args); i++){
         String var_name = "TEMP " + i;
         if(curr_func.range_map.containsKey(var_name)){
            intervalAttr interval = curr_func.range_map.get(var_name);
            if(!interval.allocated_register.equals("-1")){
               alloc_register = interval.allocated_register;
               print("\tMOVE " + alloc_register + " a" + i);
            }
            else{
               alloc_register = "v" + curr_vstatus;
               if(chahel_vass) alloc_register = "v0";
               flip_vstatus();
               print("\tMOVE " + alloc_register + " a" + i);
               Integer index = Math.max(0, curr_func.num_args-4) + interval.stack_location;
                 
               print("\tASTORE SPILLEDARG " + index + " " + alloc_register);
            }
         }
         else{
            // WHY??
            if(print_comments) print("// DEBUG: NOT LIVE");
            alloc_register = "v" + curr_vstatus;
            if(chahel_vass) alloc_register = "v0";
            flip_vstatus();
            print("\tMOVE " + alloc_register + " a" + i);
         }
      }

      String source_register = "-1";
      for(int i = 4; i < curr_func.num_args; i++){
         source_register = "v" + curr_vstatus;
         flip_vstatus();
         if(chahel_vass) source_register = "v0";
         print("\tALOAD " + source_register + " SPILLEDARG " + (i-4));
         String var_name = "TEMP " + i;
         if(curr_func.range_map.containsKey(var_name)){
            intervalAttr interval = curr_func.range_map.get(var_name);
            if(!interval.allocated_register.equals("-1")){
               alloc_register = interval.allocated_register;
               print("\tMOVE " + alloc_register + " " + source_register);
            }
            else{
               alloc_register = "v" + curr_vstatus;
               if(chahel_vass) alloc_register = "v0"; 
               flip_vstatus();
               print("\tMOVE " + alloc_register + " " + source_register);
               Integer index = Math.max(0, curr_func.num_args-4) + interval.stack_location;
                 
               print("\tASTORE SPILLEDARG " + index + " " + alloc_register);
            }
         }

      }
      n.f4.accept(this, argu);
      calle_load();
      print("END");

      if(curr_func.spilled_check) print("// SPILLED");
      else print("// NOTSPILLED");
      return _ret;
   }

   /**
    * f0 -> NoOpStmt()
    *       | ErrorStmt()
    *       | CJumpStmt()
    *       | JumpStmt()
    *       | HStoreStmt()
    *       | HLoadStmt()
    *       | MoveStmt()
    *       | PrintStmt()
    */
   // done
   public R visit(Stmt n, A argu) {
      R _ret=null;
      line_count ++;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "NOOP"
    */
   public R visit(NoOpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      print("\tNOOP");
      return _ret;
   }

   /**
    * f0 -> "ERROR"
    */
   public R visit(ErrorStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      print("\tERROR");
      return _ret;
   }

   /**
    * f0 -> "CJUMP"
    * f1 -> Temp()
    * f2 -> Label()
    */
   // done
   public R visit(CJumpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String alloc_register = (String) n.f1.accept(this, argu);
      label_check = false;
      String label_name = (String) n.f2.accept(this, argu);
      label_name = curr_func.name + "__" + label_name;
      label_check = true;
      print("\tCJUMP " + alloc_register + " " + label_name);
      // if(alloc_register.equals("v0") || alloc_register.equals("v1")) flip_vstatus();
      return _ret;
   }

   /**
    * f0 -> "JUMP"
    * f1 -> Label()
    */
   // done
   public R visit(JumpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      label_check = false;
      String label_name = (String) n.f1.accept(this, argu);
      label_name = curr_func.name + "__" + label_name;
      label_check = true;
      print("\tJUMP " + label_name);
      return _ret;
   }

   /**
    * f0 -> "HSTORE"
    * f1 -> Temp()
    * f2 -> IntegerLiteral()
    * f3 -> Temp()
    */
   // done
   public R visit(HStoreStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String alloc_register1 = (String) n.f1.accept(this, argu);
      String offset = (String) n.f2.accept(this, argu);
      String alloc_register2 = (String) n.f3.accept(this, argu);
      print("\tHSTORE " + alloc_register1 + " " + offset + " " + alloc_register2);
      // if(alloc_register1.equals("v0") || alloc_register1.equals("v1")) flip_vstatus();
      // if(alloc_register2.equals("v0") || alloc_register2.equals("v1")) flip_vstatus();
      return _ret;
   }

   /**
    * f0 -> "HLOAD"
    * f1 -> Temp()
    * f2 -> Temp()
    * f3 -> IntegerLiteral()
    */
    // done
   public R visit(HLoadStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String var_name = "TEMP " + (String) n.f1.f1.f0.tokenImage;
      String alloc_register1 = (String) n.f1.accept(this, argu);
      String alloc_register2 = (String) n.f2.accept(this, argu);
      String offset = (String) n.f3.accept(this, argu);

      print("\tHLOAD " + alloc_register1 + " " + alloc_register2 + " " + offset);
      // store(curr_func, var_name, "v1", line_count);
      if(alloc_register1.equals("v0") || alloc_register1.equals("v1")){
         if(curr_func.range_map.containsKey(var_name)){
            intervalAttr interval = curr_func.range_map.get(var_name);
            Integer index = Math.max(0, curr_func.num_args-4) + interval.stack_location;  
            
            print("\tASTORE SPILLEDARG " + index + " " + alloc_register1);
         }
      }
      // if(alloc_register1.equals("v0") || alloc_register1.equals("v1")) flip_vstatus();
      // if(alloc_register2.equals("v0") || alloc_register2.equals("v1")) flip_vstatus();
      return _ret;
   }

   /**
    * f0 -> "MOVE"
    * f1 -> Temp()
    * f2 -> Exp()
    */
   // done
   public R visit(MoveStmt n, A argu) {
      R _ret=null;
      if(print_comments) print("// DEBUG : " + line_count);
      n.f0.accept(this, argu);
      String var_name = "TEMP " + (String) n.f1.f1.f0.tokenImage;
      String alloc_register = (String) n.f1.accept(this, argu);
      label_check = false;
      String exp_register = (String) n.f2.accept(this, argu);
      label_check = true;
      
      // store(curr_func, var_name, exp_register, line_count);
      if(!reg_list.contains(exp_register)){
         if(!chahel_vass){
            print("\tMOVE v" + curr_vstatus + " " + exp_register);
            exp_register = "v" + curr_vstatus;
         }
         if(chahel_vass){
            print("\tMOVE v0 " + exp_register);
            exp_register = "v0";
         }
         flip_vstatus();
      }
      print("\tMOVE " + alloc_register + " " + exp_register);
      if(exp_register.equals("v0") || exp_register.equals("v1")) flip_vstatus();

      if(alloc_register.equals("v0") || alloc_register.equals("v1")){
         if(curr_func.range_map.containsKey(var_name)){
            intervalAttr interval = curr_func.range_map.get(var_name);
            Integer index = Math.max(0, curr_func.num_args-4) + interval.stack_location;  
            
            print("\tASTORE SPILLEDARG " + index + " " + alloc_register);
         }
      }
      // if(alloc_register.equals("v0") || alloc_register.equals("v1")) flip_vstatus();
      return _ret;
   }

   /**
    * f0 -> "PRINT"
    * f1 -> SimpleExp()
    */
   // done
   public R visit(PrintStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String alloc_register = (String) n.f1.accept(this, argu);
      print("\tPRINT " + alloc_register);
      
      // if(alloc_register.equals("v0") || alloc_register.equals("v1")) flip_vstatus();
      return _ret;
   }

   /**
    * f0 -> Call()
    *       | HAllocate()
    *       | BinOp()
    *       | SimpleExp()
    */
   // done
   public R visit(Exp n, A argu) {
      R _ret=null;
      String alloc_register = (String) n.f0.accept(this, argu);
      
      // if(alloc_register.equals("v0") || alloc_register.equals("v1")) flip_vstatus();
      return (R) alloc_register;
   }

   /**
    * f0 -> "BEGIN"
    * f1 -> StmtList()
    * f2 -> "RETURN"
    * f3 -> SimpleExp()
    * f4 -> "END"
    */
   // done
   public R visit(StmtExp n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      line_count ++;
      n.f1.accept(this, argu);
      line_count ++;
      n.f2.accept(this, argu);
      String result_register = (String) n.f3.accept(this, argu);
      String temp_reg = "v" + curr_vstatus;
      flip_vstatus();
      if(stored_register.equals("v1")){
         print("\tMOVE v0 v1");
         flip_vstatus();
      }
      print("\tMOVE v0 " + result_register);
      n.f4.accept(this, argu);
      line_count ++;
      return _ret;
   }

   /**
    * f0 -> "CALL"
    * f1 -> SimpleExp()
    * f2 -> "("
    * f3 -> ( Temp() )*
    * f4 -> ")"
    */
   // done (CHECK)
   public R visit(Call n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String alloc_register = (String) n.f1.accept(this, argu);
      caller_store();
      n.f2.accept(this, argu);
      count_args = true;
      arg_cnt = 0;
      n.f3.accept(this, argu); // pass something?
      count_args = false;
      n.f4.accept(this, argu);
      print("\tCALL " + alloc_register);
      caller_load();
      String stored_register = "v" + curr_vstatus;
      flip_vstatus();
      if(stored_register.equals("v1")){
         print("\tMOVE v0 v1");
         flip_vstatus();
      }
      // if(alloc_register.equals("v0") || alloc_register.equals("v1")) flip_vstatus();
      return (R) stored_register;
   }

   /**
    * f0 -> "HALLOCATE"
    * f1 -> SimpleExp()
    */
   // done
   public R visit(HAllocate n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String alloc_register = (String) n.f1.accept(this, argu);
      String ret_exp = "HALLOCATE " + alloc_register;
      return (R) ret_exp;
   }

   /**
    * f0 -> Operator()
    * f1 -> Temp()
    * f2 -> SimpleExp()
    */
    // done
   public R visit(BinOp n, A argu) {
      R _ret=null;
      String operator = (String) n.f0.accept(this, argu);
      // String operator = (String) n.f0.tokenImage;
      String alloc_register1 = (String) n.f1.accept(this, argu);
      String alloc_register2 = (String) n.f2.accept(this, argu);
      String ret_exp = operator + " " + alloc_register1 + " " + alloc_register2;
      return (R) ret_exp;
   }

   /**
    * f0 -> "LE"
    *       | "NE"
    *       | "PLUS"
    *       | "MINUS"
    *       | "TIMES"
    *       | "DIV"
    */
   // done
   public R visit(Operator n, A argu) {
      R _ret=null;
      String operator_str = (String) n.f0.accept(this, argu);
      operator_str = n.f0.choice.toString();
      return (R) operator_str;
      // return _ret;
   }

   /**
    * f0 -> Temp()
    *       | IntegerLiteral()
    *       | Label()
    */
   // done
   public R visit(SimpleExp n, A argu) {
      R _ret=null;
      String alloc_register = (String) n.f0.accept(this, argu);
      return (R) alloc_register;
   }

   /**
    * f0 -> "TEMP"
    * f1 -> IntegerLiteral()
    */
    // TO BE DONE
   public R visit(Temp n, A argu) {
      R _ret=null;

      n.f0.accept(this, argu);
      String var_str = (String) n.f1.accept(this, argu);      
      String id_name = "TEMP " + var_str;
      
      String reg = "-1";
      reg = "v" + curr_vstatus;
      if(chahel_vass) reg = "v1s";
      flip_vstatus();

      if(curr_func.range_map.containsKey(id_name)){
         intervalAttr interval = curr_func.range_map.get(id_name);
         if(!interval.allocated_register.equals("-1")){
            reg = interval.allocated_register;
         }
         else{
            Integer index = Math.max(0, curr_func.num_args - 4) + interval.stack_location;
            print("\tALOAD " + reg + " SPILLEDARG " + index);
         }
      }

      if(count_args){
         arg_cnt ++;
         if(debug) print("a"+(arg_cnt -1) + " == " + id_name);
         if(arg_cnt <= 4) print("\tMOVE a" + (arg_cnt - 1) + " " + reg);
         else print("\tPASSARG " + (arg_cnt-4) + " " + reg);
      }

      return (R) reg;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   // done
   public R visit(IntegerLiteral n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String var_str = (String) n.f0.tokenImage;
      return (R) var_str;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   // done
   public R visit(Label n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String id_name = (String) n.f0.tokenImage;
      if(label_check) {
         line_count ++;
         print(curr_func.name + "__" + id_name);
      }
      return (R) id_name;
   }

}
