//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class Pass2<R,A> implements GJVisitor<R,A> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
   Map<String, Pass1.classAttr> classTable;
   int debug = 0;
   int typecheck = 0;
   int initcheck = 1;
   int is_variable = 1;
   String curClass = "";
   String curMethod = "";
   public Pass2(Map<String, Pass1.classAttr> ct) {
        classTable = ct;
    }

    public void typeError(){
		System.out.println("Type error");
		System.exit(1);
	}

   public void symbolError(){
		System.out.println("Symbol not found");
		System.exit(1);
	}

   // public boolean isEqual(String cname1, String cname2){
   //    // cname1 should be ancestor of cname2
   //    if(cname1.equals(cname2)){
   //       return true;
   //    }
   //    if(cname1.equals("int") || cname1.equals("boolean") || cname1.equals("int[]")
   //    || cname2.equals("int") || cname2.equals("boolean") || cname2.equals("int[]")){
   //       return false;
   //    }
   //    Pass1.classAttr cattr = classTable.get(cname1);
   //    String pname = cattr.parentClass;
   //    if(pname == null){
   //       return false;
   //    }
   //    return isEqual(pname, cname2);
   // }

   public boolean cycleCheckHelper(String cname){
      ArrayList<String> aList = new ArrayList<String>();
      aList.add(cname);
      Pass1.classAttr cattr = classTable.get(cname);
      String pname = cattr.parentClass;
      if(pname.equals("-1")){
         return false;
      }
      while(!pname.equals("-1")){
         if(aList.contains(pname)){
            return true;
         }
         aList.add(pname);
         cattr = classTable.get(pname);
         pname = cattr.parentClass;
      }
      return false;
   }

   public void cycleCheck(){
      for (Map.Entry<String, Pass1.classAttr> entry : classTable.entrySet()) {
         String cname = entry.getKey();
         boolean iscycle = cycleCheckHelper(cname);
         if(iscycle == true){
            if(typecheck == 1){
               System.out.println("Cycle detected");
            }
            typeError();
         }
      }
   }

   public boolean isStandardType(String vtype){
      return (vtype.equals("int") || vtype.equals("int[]") || vtype.equals("boolean"));
   }

   public boolean isSameRetType(String rettypebase, String rettypederv){
      if(isStandardType(rettypebase) || isStandardType(rettypederv)){
         return rettypebase.equals(rettypederv);
      }
      if(rettypebase.equals(rettypederv)){
         return true;
      }
      String cname = rettypederv;
      if(!classTable.containsKey(cname)){
         if(typecheck == 1){
            System.out.println("Error - isSameRetType");
         }
         typeError();
      }
      Pass1.classAttr cattr = classTable.get(cname);
      String pname = cattr.parentClass;
      while(pname != "-1"){
         if(pname.equals(rettypebase)){
            return true;
         }
         cattr = classTable.get(pname);
         pname = cattr.parentClass;
      }
      return false;
   }

   public boolean isSameMethod(Pass1.methAttr methbase, Pass1.methAttr methderv){
      boolean rettypecheck = isSameRetType(methbase.rettype, methderv.rettype);
      if(!rettypecheck){
         if(typecheck == 1){
            System.out.println("Error - isSameMethod(1)");
         }
         typeError();
      }

      ArrayList<String> argListBase = methbase.arg.argType;
      ArrayList<String> argListDerv = methderv.arg.argType;

      if(argListBase.size() != argListDerv.size()){
         if(typecheck == 1){
            System.out.println("Error - isSameMethod(2)");
         }
         typeError();
      }

      for(int i=0; i < argListBase.size() ;i++){
         String typebase = argListBase.get(i);
         String typederv = argListDerv.get(i);
         boolean argtypecheck = isSameRetType(typebase, typederv);
         if(!argtypecheck)
         {
            if(typecheck == 1){
               System.out.println("Error -isSameMethod(3)");
            }
            typeError();
         }
      }
      return true;
   }


   public void overLoadCheckHelper(String cname){
      if(debug == 1) System.out.println("Class hai na " + cname);
      Pass1.classAttr cattr = classTable.get(cname);
      for (Map.Entry<String, Pass1.methAttr> entry : cattr.methMap.entrySet()) {
         String mname = entry.getKey();
         String pname = cattr.parentClass;
         while(!pname.equals("-1")){
            if(debug == 1) System.out.println("Parent hai na " + pname);
            Pass1.classAttr pcattr = classTable.get(pname);
            if(pcattr.methMap.containsKey(mname)){
               if(!isSameMethod(pcattr.methMap.get(mname), entry.getValue())){
                  if(typecheck == 1){
                     if(debug == 1) System.out.println("Overloading detected");
                  }
                  typeError();
               }
            }
            pname = pcattr.parentClass;
         }
      }
   }

   public void overLoadingCheck(){
      for (Map.Entry<String, Pass1.classAttr> entry : classTable.entrySet()) {
         String cname = entry.getKey();
         overLoadCheckHelper(cname);
      }
   }

    public void printStuff(){
        for (Map.Entry<String, Pass1.classAttr> entry : classTable.entrySet()) {
            String cname = entry.getKey();
            Pass1.classAttr cattr = entry.getValue();
            System.out.println("Class: " + cname);
            System.out.println("Parent Class: " + cattr.parentClass);
            for(Map.Entry<String, Pass1.varAttr> entry2 : cattr.getvarMap().entrySet()){
                String vname = entry2.getKey();
                Pass1.varAttr vattr = entry2.getValue();
                String vtype = vattr.type;
                System.out.println("VarName: " + vname + "; Type: " + vtype);
            }
            for(Map.Entry<String, Pass1.methAttr> entry2 : cattr.methMap.entrySet()){
                String mname = entry2.getKey();
                Pass1.methAttr mattr = entry2.getValue();
                System.out.println("Method: " + mname);
                System.out.println("Arguments: ");
                for(Map.Entry<String, Pass1.varAttr> entry3 : mattr.arg.argMap.entrySet()){
                    String vname = entry3.getKey();
                    Pass1.varAttr vattr = entry3.getValue();
                    String vtype = vattr.type;
                    System.out.println("ArgName: " + vname + "; Type: " + vtype);
                }
                System.out.println(mattr.arg.argType.size());
                for (String element : mattr.arg.argType) {
                  System.out.print(element+" ");
                }
                System.out.println("Variables: ");
                for(Map.Entry<String, Pass1.varAttr> entry3 : mattr.varMap.entrySet()){
                    String vname = entry3.getKey();
                    Pass1.varAttr vattr = entry3.getValue();
                    String vtype = vattr.type;
                    System.out.println("VarName: " + vname + "; Type: " + vtype);
                }

            }
        }
    }

   public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) { return null; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> MainClass()
    * f1 -> ( TypeDeclaration() )*
    * f2 -> <EOF>
    */
   public R visit(Goal n, A argu) {
      R _ret=null;
      if(debug == 1){
         printStuff();
      }
      cycleCheck();
      overLoadingCheck();
      
      if(debug == 1){
         boolean test = isSameRetType("MyVisitor", "Visitor");
         System.out.println("Result of test " + test);
      }
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> "public"
    * f4 -> "static"
    * f5 -> "void"
    * f6 -> "main"
    * f7 -> "("
    * f8 -> "String"
    * f9 -> "["
    * f10 -> "]"
    * f11 -> Identifier()
    * f12 -> ")"
    * f13 -> "{"
    * f14 -> PrintStatement()
    * f15 -> "}"
    * f16 -> "}"
    */
   public R visit(MainClass n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      is_variable = 0;
      n.f1.accept(this, argu);
      is_variable = 1;
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      n.f10.accept(this, argu);
      is_variable = 0;
      n.f11.accept(this, argu);
      is_variable = 1;
      n.f12.accept(this, argu);
      n.f13.accept(this, argu);
      n.f14.accept(this, argu);
      n.f15.accept(this, argu);
      n.f16.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ClassDeclaration()
    *       | ClassExtendsDeclaration()
    */
   public R visit(TypeDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> ( VarDeclaration() )*
    * f4 -> ( MethodDeclaration() )*
    * f5 -> "}"
    */
   public R visit(ClassDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      is_variable = 0;
		String cname = (String)n.f1.accept(this, argu);
      is_variable = 1;
		curClass = cname;
		n.f2.accept(this, argu);
		n.f3.accept(this, argu);
      if(debug == 1){
         System.out.println("Var Dec done");
      }
		n.f4.accept(this, argu);
		n.f5.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "extends"
    * f3 -> Identifier()
    * f4 -> "{"
    * f5 -> ( VarDeclaration() )*
    * f6 -> ( MethodDeclaration() )*
    * f7 -> "}"
    */
   public R visit(ClassExtendsDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      is_variable = 0;
      String cname = (String) n.f1.accept(this, argu);
      is_variable = 1;
      curClass = cname;
      n.f2.accept(this, argu);
      is_variable = 0;
      n.f3.accept(this, argu);
      is_variable = 1;
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    * f2 -> ";"
    */
   public R visit(VarDeclaration n, A argu) {
      R _ret=null;
      if(debug == 1){
         System.out.println("Entered VarDec");
      }
      is_variable = 0;
      String vtype = (String) n.f0.accept(this, argu);
      is_variable = 1;
      if(!isStandardType(vtype) && !classTable.containsKey(vtype)){
         if(typecheck == 1){
            System.out.println("Error - VarDeclaration");
         }
         symbolError();
      }
      // System.out.println("Checking " + vtype);
      String vname = (String) n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      if(debug == 1){
         System.out.println("Exited VarDec");
      }
      return _ret;
   }

   /**
    * f0 -> "public"
    * f1 -> Type()
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( FormalParameterList() )?
    * f5 -> ")"
    * f6 -> "{"
    * f7 -> ( VarDeclaration() )*
    * f8 -> ( Statement() )*
    * f9 -> "return"
    * f10 -> Expression()
    * f11 -> ";"
    * f12 -> "}"
    */
   public R visit(MethodDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      is_variable = 0;
      String rtype = (String) n.f1.accept(this, argu);
      is_variable = 1;
      if(debug == 1){
         System.out.println(rtype);
      }
      is_variable = 0;
      String mname = (String) n.f2.accept(this, argu);
      is_variable = 1;
      curMethod = mname;
      if(debug == 1){
         System.out.println("Method Name : " + mname);   
      }
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      String etype = (String) n.f10.accept(this, argu);
      if(debug == 1){
         System.out.println("matching types " + rtype + " != " + etype);
      }
      // Ancestor Handling (DONE)
      String typebase = rtype;
      String typederv = etype;
      boolean rettypecheck = isSameRetType(typebase, typederv);
      if(!rettypecheck){
         if(typecheck == 1) System.out.println("Matching " + typebase + " with " + typederv);
         if(typecheck == 1){
            System.out.println("Error - MethDeclaration");
         }
         typeError();
      }
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);

      return _ret;
   }

   /**
    * f0 -> FormalParameter()
    * f1 -> ( FormalParameterRest() )*
    */
   public R visit(FormalParameterList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    */
   public R visit(FormalParameter n, A argu) {
      R _ret=null;
      is_variable = 0;
      String vtype = (String)n.f0.accept(this, argu);
      is_variable = 1;
      if(!isStandardType(vtype) && !classTable.containsKey(vtype)){
         if(typecheck == 1){
            System.out.println("Error - FormalParameter");
         }
         symbolError();
      }
		String vname = (String)n.f1.accept(this, (A) vtype);
      if(debug == 1) {
         System.out.println(vname + " " + vtype);
      }
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> FormalParameter()
    */
   public R visit(FormalParameterRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ArrayType()
    *       | BooleanType()
    *       | IntegerType()
    *       | Identifier()
    */
   public R visit(Type n, A argu) {
      R _ret=null;
      if(debug == 1){
         System.out.println("Entered Type");
      }
      String etype = (String) n.f0.accept(this, argu);
      if(debug == 1){
         System.out.println("Exited Type with " + etype);
      }
      return (R) etype;
   }

   /**
    * f0 -> "int"
    * f1 -> "["
    * f2 -> "]"
    */
   public R visit(ArrayType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return (R) "int[]";
   }

   /**
    * f0 -> "boolean"
    */
   public R visit(BooleanType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return (R) "boolean";
   }

   /**
    * f0 -> "int"
    */
   public R visit(IntegerType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return (R) "int";
   }

   /**
    * f0 -> Block()
    *       | AssignmentStatement()
    *       | ArrayAssignmentStatement()
    *       | IfStatement()
    *       | WhileStatement()
    *       | DoStatement()
    *       | PrintStatement()
    */
   public R visit(Statement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "{"
    * f1 -> ( Statement() )*
    * f2 -> "}"
    */
   public R visit(Block n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "="
    * f2 -> Expression()
    * f3 -> ";"
    */
   public R visit(AssignmentStatement n, A argu) {
      R _ret=null;
      String vtype = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String etype = (String) n.f2.accept(this, argu);
      // boolean bcheck = !(etype.equals(vtype));
      String typebase = vtype;
      String typederv = etype;
      boolean assigncheck = isSameRetType(typebase, typederv);
      // bcheck = !isEqual(vtype, etype);
      // Ancestor Handling (DONE)
      if(!assigncheck){
         if(typecheck == 1){
            System.out.println("Error - AssignmentStatement");
         }
         typeError();
      }
      n.f3.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "["
    * f2 -> Expression()
    * f3 -> "]"
    * f4 -> "="
    * f5 -> Expression()
    * f6 -> ";"
    */
   public R visit(ArrayAssignmentStatement n, A argu) {
      R _ret=null;
      String vtype = (String) n.f0.accept(this, argu);
      // if(!vtype.equals("int[]")){
      //    if(typecheck == 1){
      //       System.out.println("Error - ArrayAssignmentStatement(1)");
      //    }
      //    typeError();
      // }
      n.f1.accept(this, argu);
      String etype1 = (String) n.f2.accept(this, argu);
      if(!etype1.equals("int")){
         if(typecheck == 1){
            System.out.println("Error - ArrayAssignmentStatement(2)");
         }
         typeError();
      }
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      String etype2 = (String) n.f5.accept(this, argu);
      if(!etype2.equals("int")){
         if(typecheck == 1){
            System.out.println("Error - ArrayAssignmentStatement(3)");
         }
         typeError();
      }
      n.f6.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> IfthenElseStatement()
    *       | IfthenStatement()
    */
   public R visit(IfStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(IfthenStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String etype = (String) n.f2.accept(this, argu);
      if(!etype.equals("boolean")){
         if(typecheck == 1){
            System.out.println("Error - IfthenStatement");
         }
         typeError();
      }
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    * f5 -> "else"
    * f6 -> Statement()
    */
   public R visit(IfthenElseStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String etype = (String) n.f2.accept(this, argu);
      if(!etype.equals("boolean")){
         if(typecheck == 1){
            System.out.println("Error - IfthenElseStatement");
         }
         typeError();
      }
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "while"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(WhileStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String etype = (String) n.f2.accept(this, argu);
      if(!etype.equals("boolean")){
         if(typecheck == 1){
            System.out.println("Error - WhileStatement");
         }
         typeError();
      }
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "do"
    * f1 -> Statement()
    * f2 -> "while"
    * f3 -> "("
    * f4 -> Expression()
    * f5 -> ")"
    * f6 -> ";"
    */
   public R visit(DoStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      String etype = (String) n.f4.accept(this, argu);
      if(!etype.equals("boolean")){
         if(typecheck == 1){
            System.out.println("Error - DoStatement");
         }
         typeError();
      }
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "System.out.println"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> ";"
    */
   public R visit(PrintStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String etype = (String) n.f2.accept(this, argu);
      if(!etype.equals("int")){
         if(typecheck == 1){
            System.out.println("Error - PrintStatement");
         }
         typeError();
      }
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> OrExpression()
    *       | AndExpression()
    *       | CompareExpression()
    *       | neqExpression()
    *       | AddExpression()
    *       | MinusExpression()
    *       | TimesExpression()
    *       | DivExpression()
    *       | ArrayLookup()
    *       | ArrayLength()
    *       | MessageSend()
    *       | PrimaryExpression()
    */
   public R visit(Expression n, A argu) {
      R _ret=null;
      String etype = (String) n.f0.accept(this, argu);
      return (R)etype;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "&&"
    * f2 -> PrimaryExpression()
    */
   public R visit(AndExpression n, A argu) {
      R _ret=null;
      String etype1 = (String) n.f0.accept(this, argu);
      if(!etype1.equals("boolean")){
         if(typecheck == 1){
            System.out.println("Error - AndExpression");
         }
         typeError();
      }
      n.f1.accept(this, argu);
      String etype2 = (String) n.f2.accept(this, argu);
      if(!etype2.equals("boolean")){
         if(typecheck == 1){
            System.out.println("Error - AndExpression");
         }
         typeError();
      }
      return (R)"boolean";
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "||"
    * f2 -> PrimaryExpression()
    */
   public R visit(OrExpression n, A argu) {
      R _ret=null;
      String etype1 = (String) n.f0.accept(this, argu);
      if(!etype1.equals("boolean")){
         if(typecheck == 1){
            System.out.println("Error - OrExpression");
         }
         typeError();
      }
      n.f1.accept(this, argu);
      String etype2 = (String) n.f2.accept(this, argu);
      if(!etype2.equals("boolean")){
         if(typecheck == 1){
            System.out.println("Error - OrExpression");
         }
         typeError();
      }
      return (R)"boolean";
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "<="
    * f2 -> PrimaryExpression()
    */
   public R visit(CompareExpression n, A argu) {
      R _ret=null;
      String etype1 = (String) n.f0.accept(this, argu);
      if(!etype1.equals("int")){
         if(typecheck == 1){
            System.out.println("Error - CompareExpression");
         }
         typeError();
      }
      n.f1.accept(this, argu);
      String etype2 = (String) n.f2.accept(this, argu);
      if(!etype2.equals("int")){
         if(typecheck == 1){
            System.out.println("Error - CompareExpression");
         }
         typeError();
      }
      return (R)"boolean";
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "!="
    * f2 -> PrimaryExpression()
    */
   public R visit(neqExpression n, A argu) {
      R _ret=null;
      String etype1 = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String etype2 = (String) n.f2.accept(this, argu);
      // Base != Derived  (Ancestor Handling) (DONE)
      boolean equalcheck = isSameRetType(etype1, etype2) || isSameRetType(etype2, etype1);
      if(!equalcheck){
         if(typecheck == 1){
            System.out.println("Error - neqExpression");
         }
         typeError();
      }
      return (R)"boolean";
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "+"
    * f2 -> PrimaryExpression()
    */
   public R visit(AddExpression n, A argu) {
      R _ret=null;
      String etype1 = (String) n.f0.accept(this, argu);
      if(!etype1.equals("int")){
         if(typecheck == 1){
            System.out.println("Error - AddExpression");
         }
         typeError();
      }
      n.f1.accept(this, argu);
      String etype2 = (String) n.f2.accept(this, argu);
      if(!etype2.equals("int")){
         if(typecheck == 1){
            System.out.println("Error - AddExpression");
         }
         typeError();
      }
      return (R)"int";
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "-"
    * f2 -> PrimaryExpression()
    */
   public R visit(MinusExpression n, A argu) {
      R _ret=null;
      String etype1 = (String) n.f0.accept(this, argu);
      if(!etype1.equals("int")){
         if(typecheck == 1){
            System.out.println("Error - MinusExpression");
         }
         typeError();
      }
      n.f1.accept(this, argu);
      String etype2 = (String) n.f2.accept(this, argu);
      if(!etype2.equals("int")){
         if(typecheck == 1){
            System.out.println("Error - MinusExpression");
         }
         typeError();
      }
      return (R)"int";
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "*"
    * f2 -> PrimaryExpression()
    */
   public R visit(TimesExpression n, A argu) {
      R _ret=null;
      String etype1 = (String) n.f0.accept(this, argu);
      if(!etype1.equals("int")){
         if(typecheck == 1){
            System.out.println("Error - TimesExpression");
         }
         typeError();
      }
      n.f1.accept(this, argu);
      String etype2 = (String) n.f2.accept(this, argu);
      if(!etype2.equals("int")){
         if(typecheck == 1){
            System.out.println("Error - TimesExpression");
         }
         typeError();
      }
      return (R)"int";
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "/"
    * f2 -> PrimaryExpression()
    */
   public R visit(DivExpression n, A argu) {
      R _ret=null;
      String etype1 = (String) n.f0.accept(this, argu);
      if(!etype1.equals("int")){
         if(typecheck == 1){
            System.out.println("Error - DivExpression");
         }
         typeError();
      }
      n.f1.accept(this, argu);
      String etype2 = (String) n.f2.accept(this, argu);
      if(!etype2.equals("int")){
         if(typecheck == 1){
            System.out.println("Error - DivExpression");
         }
         typeError();
      }
      return (R)"int";
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "["
    * f2 -> PrimaryExpression()
    * f3 -> "]"
    */
   public R visit(ArrayLookup n, A argu) {
      R _ret=null;
      String etype1 = (String) n.f0.accept(this, argu);
      if(!etype1.equals("int[]")){
         if(typecheck == 1){
            System.out.println("Error - ArrayLookup");
         }
         typeError();
      }
      n.f1.accept(this, argu);
      String etype2 = (String) n.f2.accept(this, argu);
      if(!etype2.equals("int")){
         if(typecheck == 1){
            System.out.println("Error - ArrayLookup");
         }
         typeError();
      }
      n.f3.accept(this, argu);
      return (R)"int";
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> "length"
    */
   public R visit(ArrayLength n, A argu) {
      R _ret=null;
      String etype = (String) n.f0.accept(this, argu);
      if(!etype.equals("int[]")){
         if(typecheck == 1){
            System.out.println("Error - ArrayLength");
         }
         typeError();
      }
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return (R)"int";
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( ExpressionList() )?
    * f5 -> ")"
    */
   public R visit(MessageSend n, A argu) {
      R _ret=null;
      // is_variable = 0;
      String cname = (String) n.f0.accept(this, argu);
      // is_variable = 1;
      n.f1.accept(this, argu);
      is_variable = 0;
      String mname = (String) n.f2.accept(this, argu);
      is_variable = 1;
      n.f3.accept(this, argu);
      ArrayList<String> argList = new ArrayList<String> ();
      n.f4.accept(this, (A) argList);
      n.f5.accept(this, argu);

      if(!classTable.containsKey(cname)){
         if(debug == 1){
            System.out.println("Where is cname (not class)?");
         }
         if(typecheck == 1){
            System.out.println("Error - MessageSend(1) " + cname + mname);
         }
         typeError();
      }

      Pass1.classAttr cattr = classTable.get(cname);
      int found = 0;
      // Ancestor Handling DONE
      while(cname != "-1"){
         if(cattr.methMap.containsKey(mname)){
            found = 1;
            break;
         }
         cname = cattr.parentClass;
         cattr = classTable.get(cname);
      }

      if(found == 0){
         if(typecheck == 1){
            System.out.println("Error = MessageSend(2)");
         }
         typeError();
      }



      if(argList.size() != cattr.methMap.get(mname).arg.argType.size()){
         if(debug == 1){
            System.out.println("Not matching len in " + mname + " " + argList.size() + " != " + cattr.methMap.get(mname).arg.argType.size());
         }
         if(typecheck == 1){
            System.out.println("Error - MessageSend(3)");
         }
         typeError();
      }

      for(int i=0; i < argList.size() ;i++){
         // Ancestor Handling (DONE)
         String typederv = argList.get(i);
         String typebase = cattr.methMap.get(mname).arg.argType.get(i);
         boolean argtypecheck = isSameRetType(typebase, typederv);
         if(!argtypecheck)
         {
            if(typecheck == 1){
               System.out.println("Error -isSameMethod(3)");
            }
            typeError();
         }
      }

      String rtype = (String) cattr.methMap.get(mname).rettype;
      // if(debug == 1){
      //    System.out.println("Returning type = " + rtype);
      // }
      return (R) rtype;
   }

   /**
    * f0 -> Expression()
    * f1 -> ( ExpressionRest() )*
    */
   public R visit(ExpressionList n, A argu) {
      R _ret=null;
      ArrayList<String> argList = (ArrayList<String>)argu;
		String etype = (String)n.f0.accept(this, argu);
		if(etype != null) argList.add(etype);
		n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Expression()
    */
   public R visit(ExpressionRest n, A argu) {
      R _ret=null;
      ArrayList<String> argList = (ArrayList<String>)argu;
		n.f0.accept(this, null);
		String etype = (String)n.f1.accept(this, argu);
		if(etype != null) argList.add(etype);

      return _ret;
   }

   /**
    * f0 -> IntegerLiteral()
    *       | TrueLiteral()
    *       | FalseLiteral()
    *       | Identifier()
    *       | ThisExpression()
    *       | ArrayAllocationExpression()
    *       | AllocationExpression()
    *       | NotExpression()
    *       | BracketExpression()
    */
   public R visit(PrimaryExpression n, A argu) {
      R _ret=null;
      String etype = (String) n.f0.accept(this, argu);
      return (R) etype;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return (R)"int";
   }

   /**
    * f0 -> "true"
    */
   public R visit(TrueLiteral n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return (R)"boolean";
   }

   /**
    * f0 -> "false"
    */
   public R visit(FalseLiteral n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return (R)"boolean";
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Identifier n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String idname = (String) n.f0.tokenImage;
      String idtype = idname;
      if(debug == 1) {
         System.out.println("isvar = " + is_variable + " idname = " + idname);
      }
      if(is_variable == 0){
         idtype = idname;
      }
      else{
         if(debug == 1){
            System.out.println("class : " + curClass + " method: " + curMethod);
         }
         String cname = curClass;
         Pass1.classAttr cattr = classTable.get(curClass);
         Pass1.methAttr mattr = cattr.methMap.get(curMethod);
         int done = 0;
         while(cname != "-1"){
            Map<String, Pass1.varAttr> classVarMap = cattr.varMap;
            if(debug == 1){
               System.out.println(idname + " has type " + idtype);
            }
            if(classVarMap.containsKey(idname)){
               idtype = classVarMap.get(idname).type;
               done = 1;
            }
            if(mattr != null){
         
               Map<String, Pass1.varAttr> methVarMap = mattr.varMap;
               Map<String, Pass1.varAttr> methArgMap = mattr.arg.argMap;
               if(methVarMap.containsKey(idname)){
                  idtype = methVarMap.get(idname).type;
                  done = 1;
               }
               else if(methArgMap.containsKey(idname)){
                  idtype = methArgMap.get(idname).type;
                  done = 1;
               }
               else if(classVarMap.containsKey(idname)){
                  idtype = classVarMap.get(idname).type;
                  done = 1;
               }
            }
            if(done == 1){
               break;
            }
            cname = cattr.parentClass;
            cattr = classTable.get(cname);
         }
         if(done == 0){
            if(typecheck == 1){
               System.out.println("Error - Identifier " + idname);
            }
            symbolError();
         }

      }
      return (R) idtype;
   }

   /**
    * f0 -> "this"
    */
   public R visit(ThisExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      //Return class from here
      return (R) curClass;
   }

   /**
    * f0 -> "new"
    * f1 -> "int"
    * f2 -> "["
    * f3 -> Expression()
    * f4 -> "]"
    */
   public R visit(ArrayAllocationExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      String etype = (String) n.f3.accept(this, argu);
      if(!etype.equals("int")){
         if(typecheck == 1){
            System.out.println("Error - ArrayAllocationExpression");
         }
         typeError();
      }
      n.f4.accept(this, argu);
      return (R)"int[]";
   }

   /**
    * f0 -> "new"
    * f1 -> Identifier()
    * f2 -> "("
    * f3 -> ")"
    */
   public R visit(AllocationExpression n, A argu) {
      R _ret=null;   
      n.f0.accept(this, argu);
      is_variable = 0;
      String cname = (String) n.f1.accept(this, argu);
      is_variable = 1;
      if(!classTable.containsKey(cname)){
         if(typecheck == 1){
            System.out.println("Error - AllocationExpression");
         }
         typeError();
      }
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      return (R) cname;
   }

   /**
    * f0 -> "!"
    * f1 -> Expression()
    */
   public R visit(NotExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String etype = (String) n.f1.accept(this, argu);
      if(!etype.equals("boolean")){
         if(typecheck == 1){
            System.out.println("Error - NotExpression");
         }
         typeError();
      }
      return (R)"boolean";
   }

   /**
    * f0 -> "("
    * f1 -> Expression()
    * f2 -> ")"
    */
   public R visit(BracketExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String etype = (String) n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return (R) etype;
   }

   /**
    * f0 -> Identifier()
    * f1 -> ( IdentifierRest() )*
    */
   public R visit(IdentifierList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Identifier()
    */
   public R visit(IdentifierRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

}
