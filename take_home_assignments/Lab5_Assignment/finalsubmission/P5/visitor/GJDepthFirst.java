//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJDepthFirst<R,A> implements GJVisitor<R,A> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //

   Boolean label_check = false;
   Boolean add_extra = false;
   Boolean move_print = true;
   Boolean debug = false;
   Boolean aload_debug = false;
   Boolean check = true;
   Integer arg_storage = 0;
   Integer func_num_args = 0;

   String long_str = "hello this is me shaun";
   static List<String> registers = List.of("$a0", "$a1", "$a2", "$a3", "$t0", "$t1", "$t2", "$t3", "$t4", "$t5", "$t6", "$t7",
                                         "$s0", "$s1", "$s2", "$s3", "$s4", "$s5", "$s6", "$s7", "$t8", "$t9", "$v0", "$v1");


   public void print(String str){
      System.out.println(str);
   }

   public void ERROR_PRINT(){
      print("\t\tla $a0, str_er");
      print("\t\tsyscall");
      print("\t\tli $v0, 10");
      print("\t\tsyscall");
   }

   public String get_type(String str){
      String type = str.substring(0, 3);
      return type;
   }

   public String get_value(String str){
      String value = str.substring(5);
      return value;
   }

   public List<String> splitString(String input, String delimiter) {
        String[] tokens = input.split(delimiter);
        List<String> result = new ArrayList<>();

        for (String token : tokens) {
            result.add(token);
        }

        return result;
    }


   public static boolean isInteger(String s) {
      return isInteger(s,10);
   }

   public static boolean isInteger(String s, int radix) {
      if(s.isEmpty()) return false;
      for(int i = 0; i < s.length(); i++) {
         if(i == 0 && s.charAt(i) == '-') {
               if(s.length() == 1) return false;
               else continue;
         }
         if(Character.digit(s.charAt(i),radix) < 0) return false;
      }
      return true;
   }

   public static boolean isRegister(String s){
      return registers.contains(s);
   }

/*
	.text
	.globl _halloc
*/

   public void init_print(String meth_name){
      print("\t\t.text");
	   print("\t\t.globl  " + meth_name);
   }

   public void enter(String func_name, Integer stack_cap_val){
      init_print(func_name);
      print(func_name+":");
      if(!func_name.equals("main")) print("\t\tsw $fp, -8($sp)");
      print("\t\tmove $fp, $sp");
      print("\t\tsw $ra, -4($fp)");
      print("\t\tsubu $sp, $sp, "+stack_cap_val);
   }

   public void exit(String func_name, Integer stack_cap_val)
   {
      print("\t\taddu $sp, $sp, "+stack_cap_val);
      print("\t\tlw $ra, -4($fp)");
      if(!func_name.equals("main")) print("\t\tlw $fp, -8($sp)");
      print("\t\tj $ra");
   }

   /*
_halloc:
	li $v0, 9
	syscall
	j $ra

	.text
	.globl _print
_print:
	li $v0, 1
	syscall
	la $a0, newl
	li $v0, 4
	syscall
	j $ra

	.data
	.align 0
newl:	.asciiz "\n"
	.data
	.align 0
str_er:	.asciiz "ERROR: abnormal termination\n"
*/
   public void final_print(){

      init_print("_halloc");
      print("_halloc:");
	   print("\t\tli $v0, 9");
	   print("\t\tsyscall");
	   print("\t\tj $ra");

	   init_print("_print");
      print("_print:");
      print("\t\tli $v0, 1");
      print("\t\tsyscall");
      print("\t\tla $a0, newl");
      print("\t\tli $v0, 4");
      print("\t\tsyscall");
      print("\t\tj $ra");

      print("\t\t.data");
      print("\t\t.align 0");

      print("newl:	.asciiz \"\\n\"");
      print("\t\t.data");
      print("\t\t.align 0");
      print("str_er:	.asciiz \"ERROR: abnormal termination\\n\"");
   }

   public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) { return null; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> "MAIN"
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> "["
    * f5 -> IntegerLiteral()
    * f6 -> "]"
    * f7 -> "["
    * f8 -> IntegerLiteral()
    * f9 -> "]"
    * f10 -> StmtList()
    * f11 -> "END"
    * f12 -> ( SpillInfo() )?
    * f13 -> ( Procedure() )*
    * f14 -> <EOF>
    */
   
   // done
   public R visit(Goal n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String func_name = "main";
      n.f1.accept(this, argu);
      String num_args_str = (String) n.f2.accept(this, argu);
      Integer num_args_val = Integer.parseInt(num_args_str);
      func_num_args = num_args_val * 4;
      if(aload_debug) System.out.println(func_num_args + "DEBUG");
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);

      String stack_cap_str = (String) n.f5.accept(this, argu);
      Integer stack_cap_val = Integer.parseInt(stack_cap_str);
      stack_cap_val = 4 * (stack_cap_val + 1);

      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      String arg_cap_str = (String) n.f8.accept(this, argu);
      Integer arg_cap_val = Integer.parseInt(arg_cap_str);
      arg_cap_val = arg_cap_val - 4;
      arg_cap_val = Math.max(arg_cap_val, 0);
      arg_storage = arg_cap_val;

      arg_cap_val = arg_cap_val * 4;

      stack_cap_val = stack_cap_val + arg_cap_val;
      n.f9.accept(this, argu);
      enter(func_name, stack_cap_val);
      n.f10.accept(this, argu);
      n.f11.accept(this, argu);
      exit(func_name, stack_cap_val);
      n.f12.accept(this, argu);
      n.f13.accept(this, argu);
      n.f14.accept(this, argu);
      
      final_print();
      return _ret;
   }

   /**
    * f0 -> ( ( Label() )? Stmt() )*
    */
   // done
   public R visit(StmtList n, A argu) {
      R _ret=null;
      label_check = true;
      n.f0.accept(this, argu);
      label_check = false;
      // printlabel truefalse
      return _ret;
   }

   /**
    * f0 -> Label()
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> "["
    * f5 -> IntegerLiteral()
    * f6 -> "]"
    * f7 -> "["
    * f8 -> IntegerLiteral()
    * f9 -> "]"
    * f10 -> StmtList()
    * f11 -> "END"
    * f12 -> ( SpillInfo() )?
    */
   
   // done
   public R visit(Procedure n, A argu) {
      R _ret=null;
      String func_name = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String num_args_str = (String) n.f2.accept(this, argu);
      Integer num_args_val = Integer.parseInt(num_args_str);
      func_num_args = num_args_val * 4;
      if(aload_debug) System.out.println(func_num_args + "DEBUG");
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);

      String stack_cap_str = (String) n.f5.accept(this, argu);
      Integer stack_cap_val = Integer.parseInt(stack_cap_str);

      stack_cap_val = 4 * (stack_cap_val + 2);

      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      String arg_cap_str = (String) n.f8.accept(this, argu);
      Integer arg_cap_val = Integer.parseInt(arg_cap_str);
      arg_cap_val = arg_cap_val - 4;
      arg_cap_val = Math.max(arg_cap_val, 0);
      arg_storage = arg_cap_val;

      arg_cap_val = arg_cap_val * 4;

      stack_cap_val = stack_cap_val + arg_cap_val;
      n.f9.accept(this, argu);

      enter(func_name, stack_cap_val);

      n.f10.accept(this, argu);
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);

      exit(func_name, stack_cap_val);

      return _ret;
   }

   /**
    * f0 -> NoOpStmt()
    *       | ErrorStmt()
    *       | CJumpStmt()
    *       | JumpStmt()
    *       | HStoreStmt()
    *       | HLoadStmt()
    *       | MoveStmt()
    *       | PrintStmt()
    *       | ALoadStmt()
    *       | AStoreStmt()
    *       | PassArgStmt()
    *       | CallStmt()
    */
   // done
   public R visit(Stmt n, A argu) {
      R _ret=null;
      label_check = false;
      n.f0.accept(this, argu);
      label_check = true;
      // printlabel truefalse
      return _ret;
   }

   /**
    * f0 -> "NOOP"
    */
   
   // done
   public R visit(NoOpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      print("\t\tnop");
      return _ret;
   }

   /**
    * f0 -> "ERROR"
    */
   // done
   public R visit(ErrorStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      ERROR_PRINT();
      return _ret;
   }

   /**
    * f0 -> "CJUMP"
    * f1 -> Reg()
    * f2 -> Label()
    */
    // done
   public R visit(CJumpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String reg_str = (String) n.f1.accept(this, argu);
      // label_check = false;
      String label_str = (String) n.f2.accept(this, argu);
      print("\t\tbeqz " + reg_str +" " + label_str);
      return _ret;
   }

   /**
    * f0 -> "JUMP"
    * f1 -> Label()
    */
    // done
   public R visit(JumpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      // label_check = false;
      String label_str = (String) n.f1.accept(this, argu);
      print("\t\tb " + label_str);
      return _ret;
   }

   /**
    * f0 -> "HSTORE"
    * f1 -> Reg()
    * f2 -> IntegerLiteral()
    * f3 -> Reg()
    */
    // done
   public R visit(HStoreStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String reg_str1 = (String) n.f1.accept(this, argu);
      String int_str = (String) n.f2.accept(this, argu);
      Integer int_offset = Integer.parseInt(int_str);
      String reg_str2 = (String) n.f3.accept(this, argu);
      print("\t\tsw " + reg_str2 + ", " + int_offset + "(" + reg_str1 + ")");
      return _ret;
   }

   /**
    * f0 -> "HLOAD"
    * f1 -> Reg()
    * f2 -> Reg()
    * f3 -> IntegerLiteral()
    */
    // done
   public R visit(HLoadStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String reg_str1 = (String) n.f1.accept(this, argu);
      String reg_str2 = (String) n.f2.accept(this, argu);
      String int_str = (String) n.f3.accept(this, argu);
      Integer int_offset = Integer.parseInt(int_str);
      print("\t\tlw " + reg_str1 + ", " + int_offset + "(" + reg_str2 + ")");
      return _ret;
   }

   /**
    * f0 -> "MOVE"
    * f1 -> Reg()
    * f2 -> Exp()
    */
   public R visit(MoveStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String reg_str = (String) n.f1.accept(this, argu);

      String exp_str = (String) n.f2.accept(this, argu);

      List<String> resultList = splitString(exp_str, "\\^");
      if(exp_str == null) { return _ret;}
      String test_str = resultList.get(0);

      if(test_str.equals(long_str)) {
         String op_name = resultList.get(1);
         String reg_name = resultList.get(2);
         String exp_name = resultList.get(3);
         // print("\t\tmflo " + reg_str);
         print("\t\t" + op_name + " " + reg_str + ", " + reg_name + ", " + exp_name);
      }
      else if(isInteger(exp_str)) print("\t\tli "+reg_str+" "+exp_str);
      else if(isRegister(exp_str)) print("\t\tmove "+reg_str+" "+exp_str);
      else print("\t\tla "+reg_str+" "+exp_str);
      return _ret;
   }

   /**
    * f0 -> "PRINT"
    * f1 -> SimpleExp()
    */
   public R visit(PrintStmt n, A argu) {
      R _ret=null;
      
      n.f0.accept(this, argu);
      String exp_str = (String) n.f1.accept(this, argu);
      String reg_str = "$a0";
      if(debug) print("PRINT " + exp_str);
      if(isInteger(exp_str)) print("\t\tli "+reg_str+" "+exp_str);
      else if(isRegister(exp_str)) print("\t\tmove "+reg_str+" "+exp_str);
      else print("\t\tla "+reg_str+" "+exp_str);

      print("\t\tjal _print");
      return _ret;
   }

   /**
    * f0 -> "ALOAD"
    * f1 -> Reg()
    * f2 -> SpilledArg()
    */
   // done
   public R visit(ALoadStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String reg_str = (String) n.f1.accept(this, argu);
      String int_str = (String) n.f2.accept(this, argu);
      Integer int_offset = Integer.parseInt(int_str);
      int_offset = 4 * (int_offset);
      String stack = "$sp";
      if(aload_debug) System.out.println(int_offset + " DEBUG " + func_num_args);
      if(int_offset < (func_num_args - 16)){
         stack = "$fp";
      }
      else{
         int_offset = int_offset + 4 * (arg_storage);
      }
      //reg_str.charAt(1) == 't' || reg_str.charAt(1) == 's'
      // if(!reg_str.equals("$v1")) {
      //    stack = "$sp";
      //    int_offset = int_offset + 4 * (arg_storage);
      // }
      print("\t\tlw " + reg_str + ", " + int_offset + "(" + stack +")");
      return _ret;
   }

   /**
    * f0 -> "ASTORE"
    * f1 -> SpilledArg()
    * f2 -> Reg()
    */
    // done
   public R visit(AStoreStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String int_str = (String) n.f1.accept(this, argu);
      Integer int_offset = Integer.parseInt(int_str);
      int_offset = 4 * (int_offset + arg_storage);
      String reg_str = (String) n.f2.accept(this, argu);
      print("\t\tsw " + reg_str + ", " + int_offset + "($sp)");
      return _ret;
   }

   /**
    * f0 -> "PASSARG"
    * f1 -> IntegerLiteral()
    * f2 -> Reg()
    */
   // done
   public R visit(PassArgStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String int_str = (String) n.f1.accept(this, argu);
      Integer int_offset = Integer.parseInt(int_str);
      int_offset = 4 * (int_offset - 1);
      String reg_str = (String) n.f2.accept(this, argu);
      print("\t\tsw " + reg_str + ", " + int_offset + "($sp)");
      return _ret;
   }

   /**
    * f0 -> "CALL"
    * f1 -> SimpleExp()
    */
   public R visit(CallStmt n, A argu) {
      R _ret=null;
      
      n.f0.accept(this, argu);
      String exp_str = (String) n.f1.accept(this, argu);
      
      if(debug) print("CALL " + exp_str);
      // String reg_str = "$v0";
      // if(isInteger(exp_str)) print("\t\tli "+reg_str+" "+exp_str);
      // else if(isRegister(exp_str)) print("\t\tmove "+reg_str+" "+exp_str);
      // else print("\t\tla "+reg_str+" "+exp_str);
      print("\t\tjalr " + exp_str);
      return _ret;
   }

   /**
    * f0 -> HAllocate()
    *       | BinOp()
    *       | SimpleExp()
    */
   // done
   public R visit(Exp n, A argu) {
      R _ret=null;
      String exp_str = (String) n.f0.accept(this, argu);
      return (R) exp_str;
   }

   /**
    * f0 -> "HALLOCATE"
    * f1 -> SimpleExp()
    */
   public R visit(HAllocate n, A argu) {
      R _ret=null;
      
      n.f0.accept(this, argu);
      String exp_str = (String) n.f1.accept(this, argu);
      
     
      if(debug) print("HALLOCATE " + exp_str);
      String reg_str = "$a0";
      if(isInteger(exp_str)) print("\t\tli "+reg_str+" "+exp_str);
      else if(isRegister(exp_str)) print("\t\tmove "+reg_str+" "+exp_str);
      else print("\t\tla "+reg_str+" "+exp_str);
      print("\t\tjal _halloc");
      String ret_str = "$v0";
      return (R) ret_str;
   }

   /**
    * f0 -> Operator()
    * f1 -> Reg()
    * f2 -> SimpleExp()
    */
   // done
   public R visit(BinOp n, A argu) {
      R _ret=null;
      String op_name = (String) n.f0.accept(this, argu);
      String reg_name = (String) n.f1.accept(this, argu);
      String exp_str = (String) n.f2.accept(this, argu);
      // print("\t\t" + op_name + "^" + reg_name + "^" + exp_str);
      String ret_str = long_str + "^" + op_name + "^" + reg_name + "^" + exp_str;
      return (R) ret_str;
   }

   /**
    * f0 -> "LE"
    *       | "NE"
    *       | "PLUS"
    *       | "MINUS"
    *       | "TIMES"
    *       | "DIV"
    */
   // done
   public R visit(Operator n, A argu) {
      R _ret=null;
      String var_name = (String) n.f0.accept(this, argu);
      var_name = n.f0.choice.toString();
      String ret_name = var_name;
      if(var_name == "LE") ret_name = "sle";
      else if(var_name == "NE") ret_name = "sne";
      else if(var_name == "PLUS") ret_name = "add";
      else if(var_name == "MINUS") ret_name = "sub";
      else if(var_name == "TIMES") ret_name = "mul";
      else if(var_name == "DIV") ret_name = "div";

      return (R) ret_name;
   }

   /**
    * f0 -> "SPILLEDARG"
    * f1 -> IntegerLiteral()
    */
   // done
   public R visit(SpilledArg n, A argu) {
      R _ret=null;
      
      n.f0.accept(this, argu);
      String var_name = (String) n.f1.accept(this, argu);
      
      return (R) var_name;
   }

   /**
    * f0 -> Reg()
    *       | IntegerLiteral()
    *       | Label()
    */
   // done
   public R visit(SimpleExp n, A argu) {
      R _ret=null;
      String exp_str = (String) n.f0.accept(this, argu);
      return (R) exp_str;
   }

   /**
    * f0 -> "a0"
    *       | "a1"
    *       | "a2"
    *       | "a3"
    *       | "t0"
    *       | "t1"
    *       | "t2"
    *       | "t3"
    *       | "t4"
    *       | "t5"
    *       | "t6"
    *       | "t7"
    *       | "s0"
    *       | "s1"
    *       | "s2"
    *       | "s3"
    *       | "s4"
    *       | "s5"
    *       | "s6"
    *       | "s7"
    *       | "t8"
    *       | "t9"
    *       | "v0"
    *       | "v1"
    */
    // done
   public R visit(Reg n, A argu) {
      R _ret=null;
      String reg_name = (String) n.f0.accept(this, argu);
      reg_name = n.f0.choice.toString();
      reg_name = "$" + reg_name;
      return (R) reg_name;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   // done
   public R visit(IntegerLiteral n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String int_str = (String) n.f0.tokenImage;
      return (R) int_str;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   // done
   public R visit(Label n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      // check printing
      String id_name = (String) n.f0.tokenImage;
      if(label_check) print(id_name + ":");
      return (R) id_name;
   }

   /**
    * f0 -> "//"
    * f1 -> SpillStatus()
    */
   // done
   public R visit(SpillInfo n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> <SPILLED>
    *       | <NOTSPILLED>
    */
   
   // done
   public R visit(SpillStatus n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

}
